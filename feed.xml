<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="rss.xsl" type="text/xsl"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"
     xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd">
    <channel>
            <title><![CDATA[John Bi's Blog]]></title>
            <link>https://github.com/bxb100/blog</link>
        <atom:link href="https://github.com/bxb100/blog/feed.xml" rel="self" type="application/rss+xml" />
            <description><![CDATA[RSS feed of John Bi's blog]]></description>
        <generator>IssueBlogAction</generator>
        <webMaster>bxb100@outlook.com (@bxb100)</webMaster>
            <itunes:author>bxb100</itunes:author>
                <itunes:explicit>no</itunes:explicit>
                <itunes:image href="https://cdn.jsdelivr.net/gh/bxb100/bxb100@master/png2.png" />
            <language>zh-cn</language>
            <image>
                <url>https://cdn.jsdelivr.net/gh/bxb100/bxb100@master/png2.png</url>
                    <title><![CDATA[John Bi's Blog]]></title>
                <link>https://github.com/bxb100/blog</link>
            </image>
        <lastBuildDate>Sat, 06 Aug 2022 17:39:37 GMT</lastBuildDate>
            <item>
                <title><![CDATA[How to add auth for Cloudflare Page]]></title>
                    <description><![CDATA[<ol>
<li>Add routes for domain, see the <a href="https://403.ie/how-to-use-cloudflare-to-enable-basic-auth-on-a-subdirectory" rel="nofollow">link</a>
</li>
</ol>
<p><a href="https://user-images.githubusercontent.com/20685961/183259715-0e2f24d5-4b45-4a36-8f34-631b87e6e564.png" target="_blank" rel="nofollow"><img width="1418" alt="image" src="https://user-images.githubusercontent.com/20685961/183259715-0e2f24d5-4b45-4a36-8f34-631b87e6e564.png" style="max-width:100%;"></a></p>
<ol start="2">
<li>Using Zero Trust</li>
</ol>
<ul>
<li>Set subdomain empty to protect all pages.dev, there are no other way to disable this link</li>
</ul>
<p><a href="https://user-images.githubusercontent.com/20685961/183259760-1b0a2197-682b-4a33-ad68-f460cbb18171.png" target="_blank" rel="nofollow"><img width="1083" alt="image" src="https://user-images.githubusercontent.com/20685961/183259760-1b0a2197-682b-4a33-ad68-f460cbb18171.png" style="max-width:100%;"></a></p>
<ul>
<li>Same for your domain</li>
</ul>
]]></description>
                    <pubDate>Sat, 06 Aug 2022 17:36:33 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/bxb100/blog/issues/21</guid>
                <link>https://github.com/bxb100/blog/issues/21</link>
                    <author><![CDATA[bxb100]]></author>
                        <category>Horizon</category>
                        <category>DEV</category>
                        <category>就是玩</category>
            </item>
            <item>
                <title><![CDATA[使用 charles 的 rootCA  代理后端 API]]></title>
                    <description><![CDATA[<h2>
<a id="user-content-前情" class="anchor" href="#%E5%89%8D%E6%83%85" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>前情</h2>
<p>某日我儿（前端 ios 使用 https 但是没有强制）问我如何利用 charles 来代理后端<strong>本地</strong> API 测试，我直接甩给他 <code>map remote</code> 大法 （from https to http），解决。</p>
<h2>
<a id="user-content-思考" class="anchor" href="#%E6%80%9D%E8%80%83" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>思考</h2>
<p><a href="https://user-images.githubusercontent.com/20685961/153456893-60900373-e67b-4134-813b-8eb1156a4b0d.png" target="_blank" rel="nofollow"><img width="432" alt="image" align="right" src="https://user-images.githubusercontent.com/20685961/153456893-60900373-e67b-4134-813b-8eb1156a4b0d.png" style="max-width:100%;"></a></p>
<p>这时候我觉得 charles 类似 QuantumultX 直接重写响应 payload，但是看了 doc 之后发现仅仅只是转发。然后我问了下我儿，他说他客户端没做 ssl 校验，那么之后排期做了校验这种方式可能会有问题。
这时我就想到能否利用 charles 的 rootCA 来自签，这样的话配合 DNS 和一些 web server 反向代理就能做到直接本地 https 线上域名访问了（当然 client 添加公钥这种问题就不在这里赘述了）。
<br></p>
<h2>
<a id="user-content-实验" class="anchor" href="#%E5%AE%9E%E9%AA%8C" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>实验</h2>
<p>首先先导出 charles 的 CA 和 私钥</p>
<p><strong>Help</strong> &gt;  <strong>SSL Proxying</strong> &gt;  <strong>Export Charles Root Certificate and Private Key...</strong></p>
<p>然后转成 <code>PEM</code><sup><a href="#fn-1" id="user-content-fnref-1" data-footnote-ref>1</a></sup> (<em><code>charles-ssl-proxying.p12</code> <code>newfile.xx.pem</code> 按实际情况填写</em>）</p>
<div class="highlight highlight-source-shell"><pre>openssl pkcs12 -in charles-ssl-proxying.p12 -out newfile.crt.pem -clcerts -nokeys
openssl pkcs12 -in charles-ssl-proxying.p12 -out newfile.key.pem -nocerts -nodes </pre></div>
<p>然后参考</p>
<ul>
<li><a href="https://github.com/kingkool68/generate-ssl-certs-for-local-development">https://github.com/kingkool68/generate-ssl-certs-for-local-development</a></li>
<li><a href="https://github.com/dakshshah96/local-cert-generator">https://github.com/dakshshah96/local-cert-generator</a></li>
</ul>
<p>创建（这里假如使用的是 example.com 网站）
1、server.csr.cnf</p>
<pre><code>[req]
default_bits = 2048
prompt = no
default_md = sha256
distinguished_name = dn

[dn]
C=US
ST=RandomState
L=RandomCity
O=RandomOrganization
OU=RandomOrganizationUnit
emailAddress=hello@example.com
CN = example.com
</code></pre>
<p>2、v3.ext</p>
<pre><code>authorityKeyIdentifier=keyid,issuer
basicConstraints=CA:FALSE
keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
subjectAltName = @alt_names

[alt_names]
DNS.1 = example.com
</code></pre>
<p>执行</p>
<pre><code>openssl req -new -sha256 -nodes -out server.csr -newkey rsa:2048 -keyout server.key -config server.csr.cnf

openssl x509 -req -in server.csr -CA newfile.crt.pem -CAkey newfile.key.pem -CAcreateserial -out server.crt -days 825 -sha256 -extfile v3.ext
</code></pre>
<p>获得</p>
<ul>
<li>server.key</li>
<li>server.crt</li>
</ul>
<p>使用 caddy 简单做一个反向代理</p>
<pre><code>example.com {

tls ~/server.crt ~/server.key

reverse_proxy localhost:2022
}

:2022 {
respond "&lt;h1&gt;Hello, world!&lt;/h1&gt;"
}
</code></pre>
<p><a href="https://user-images.githubusercontent.com/20685961/153470943-e0fbf171-01a9-440a-9a08-baa22c43a9a5.png" target="_blank" rel="nofollow"><img width="540" alt="image" align="right" src="https://user-images.githubusercontent.com/20685961/153470943-e0fbf171-01a9-440a-9a08-baa22c43a9a5.png" style="max-width:100%;"></a></p>
<p>然后在 charles 中配置</p>
<p><strong>Tools</strong> &gt; <strong>DNS Spoofing</strong></p>
<p>将 <code>example.com</code>指向本地 caddy，这样就能直接请求了 (当然直接改 host 也是可以的)</p>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<hr>
<p>PC:
<a href="https://user-images.githubusercontent.com/20685961/153471370-988fe1a9-0291-46dd-8df4-88792c54011f.png" target="_blank" rel="nofollow"><img alt="image" src="https://user-images.githubusercontent.com/20685961/153471370-988fe1a9-0291-46dd-8df4-88792c54011f.png" style="max-width:100%;"></a></p>
<p>Android:
<a href="https://user-images.githubusercontent.com/20685961/153471869-0b564770-f138-42bb-9dca-0d476194a929.jpg" target="_blank" rel="nofollow"><img src="https://user-images.githubusercontent.com/20685961/153471869-0b564770-f138-42bb-9dca-0d476194a929.jpg" style="max-width:100%;"></a></p>
<section data-footnotes>
<ol>
<li id="user-content-fn-1">
<p><a href="https://stackoverflow.com/questions/15144046/converting-pkcs12-certificate-into-pem-using-openssl" rel="nofollow">https://stackoverflow.com/questions/15144046/converting-pkcs12-certificate-into-pem-using-openssl</a> <a href="#fnref-1" data-footnote-backref aria-label="Back to content"><g-emoji class="g-emoji" alias="leftwards_arrow_with_hook" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/21a9.png">↩</g-emoji></a></p>
</li>
</ol>
</section>
]]></description>
                    <pubDate>Tue, 02 Aug 2022 17:33:35 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/bxb100/blog/issues/10</guid>
                <link>https://github.com/bxb100/blog/issues/10</link>
                    <author><![CDATA[bxb100]]></author>
                        <category>Horizon</category>
            </item>
            <item>
                <title><![CDATA[Java generics with overloading]]></title>
                    <description><![CDATA[<p>The scenario:</p>
<div class="highlight highlight-source-java"><pre>    <span class="pl-k">public</span> <span class="pl-k">static</span> <span class="pl-smi">void</span> <span class="pl-s1">test1</span>(<span class="pl-smi">Object</span>... <span class="pl-s1">args</span>) {

    }

    <span class="pl-k">public</span> <span class="pl-k">static</span> <span class="pl-smi">void</span> <span class="pl-s1">test1</span>(<span class="pl-smi">List</span>&lt;<span class="pl-smi">Object</span>&gt; <span class="pl-s1">args</span>) {

    }</pre></div>
<p>there are two overloading method, but when you're using</p>
<div class="highlight highlight-source-java"><pre> <span class="pl-smi">List</span>&lt;<span class="pl-smi">Long</span>&gt; <span class="pl-s1">list1</span> = <span class="pl-k">new</span> <span class="pl-smi">ArrayList</span>&lt;&gt; <span class="pl-s1">test1</span>(<span class="pl-s1">objects</span>);
 <span class="pl-en">test1</span>(<span class="pl-s1">list1</span>);</pre></div>
<p>It's always using the first method <code>test1(Object... args)</code>, but when using <code>List&lt;Object&gt; list2</code> the executor is different, It's too wired</p>
<hr>
<p>Some document identified</p>
<blockquote>
<p>The example above shows why generics and arrays don't mix well together. <strong>An array is what is called reifiable type -- a type where full type information is available during run-time.</strong> It is because Java array is reifiable that the Java run-time can check what we store into the array matches the type of the array and throw an <code>ArrayStoreException </code> at us if there is a mismatch. <strong>Java generics, however, is not reifiable due to type erasure</strong>. Java designers have decided not to mix the two.<sup><a href="#fn-1" id="user-content-fnref-1" data-footnote-ref>1</a></sup></p>
</blockquote>
<blockquote>
<p>the <code>List&lt;?&gt;</code> means you can assign any type of List to it and <code>List&lt;Object&gt;</code> means you can store any type of object into it.<sup><a href="#fn-2" id="user-content-fnref-2" data-footnote-ref>2</a></sup></p>
</blockquote>
<p>Sure, it's not the same question, but I think some conception can go to the same destination</p>
<p>I think the runtime compiler design to obey this:</p>
<ol>
<li>
<code>List</code> same as <code>List&lt;Object&gt;</code>
</li>
<li>
<code>List&lt;Type&gt; list1</code> with generics can accept any type</li>
<li>
<code>List&lt;Object&gt;</code> means just accept <code>List&lt;Object&gt;</code> or <code>List</code>
</li>
<li>
<code>List&lt;T&gt; list1</code> calling varargs method equals <code>new Object[]{ list1 }</code>
</li>
<li>Using <code>test1(Collections.singletonList(x))</code> equals <code>test1(new ArrayList&lt;Object&gt;())</code>
</li>
</ol>
<hr>
<p>So this is the check trick problem</p>
<section data-footnotes>
<ol>
<li id="user-content-fn-1">
<p><a href="https://nus-cs2030s.github.io/2021-s2/21-erasure.html" rel="nofollow">https://nus-cs2030s.github.io/2021-s2/21-erasure.html</a> <a href="#fnref-1" data-footnote-backref aria-label="Back to content"><g-emoji class="g-emoji" alias="leftwards_arrow_with_hook" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/21a9.png">↩</g-emoji></a></p>
</li>
<li id="user-content-fn-2">
<p><a href="https://www.java67.com/2021/08/real-difference-between-list-and-list.html" rel="nofollow">https://www.java67.com/2021/08/real-difference-between-list-and-list.html</a> <a href="#fnref-2" data-footnote-backref aria-label="Back to content"><g-emoji class="g-emoji" alias="leftwards_arrow_with_hook" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/21a9.png">↩</g-emoji></a></p>
</li>
</ol>
</section>
]]></description>
                    <pubDate>Fri, 29 Jul 2022 16:40:37 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/bxb100/blog/issues/20</guid>
                <link>https://github.com/bxb100/blog/issues/20</link>
                    <author><![CDATA[bxb100]]></author>
                        <category>Archive</category>
                        <category>DEV</category>
            </item>
            <item>
                <title><![CDATA[Amazon SP API 获取 listing item 的正确方式]]></title>
                    <description><![CDATA[<ul>
<li>download <code>GET_MERCHANT_LISTINGS_ALL_DATA</code> report (fr region does not contain <code>ASIN</code>)</li>
<li>download <code>GET_FLAT_FILE_OPEN_LISTINGS_DATA</code> report (get missing <code>ASIN</code>)</li>
<li>Get the main picture and variations ASIN with the CatalogItems API</li>
</ul>
<p>source: <a href="https://medium.com/@nassuf/how-to-get-a-sellers-listings-using-amazon-sp-api-475771d3754c" rel="nofollow">https://medium.com/@nassuf/how-to-get-a-sellers-listings-using-amazon-sp-api-475771d3754c</a></p>
]]></description>
                    <pubDate>Wed, 20 Jul 2022 04:04:53 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/bxb100/blog/issues/19</guid>
                <link>https://github.com/bxb100/blog/issues/19</link>
                    <author><![CDATA[bxb100]]></author>
                        <category>DEV</category>
            </item>
            <item>
                <title><![CDATA[太多人活得不像自己]]></title>
                    <description><![CDATA[<p>思想是别人的意见, 生活是别人的模仿, 情感是别人的引述.  --- 奧斯卡·王尔德</p>
]]></description>
                    <pubDate>Wed, 13 Jul 2022 01:29:03 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/bxb100/blog/issues/3</guid>
                <link>https://github.com/bxb100/blog/issues/3</link>
                    <author><![CDATA[bxb100]]></author>
                        <category>摘录</category>
            </item>
            <item>
                <title><![CDATA[记一次 Win Docker 无法在局域网内连接的解决方案]]></title>
                    <description><![CDATA[<p>我出现的问题是 docker firewall UAC 弹窗的时候只允许了 public 连接，然后网络变成 private 导致无法连接</p>
<div class="highlight highlight-source-shell"><pre>Get-NetFirewallRule <span class="pl-k">|</span> where { <span class="pl-smi">$_</span>.Name -like <span class="pl-s"><span class="pl-pds">"</span>*docker*<span class="pl-pds">"</span></span> } <span class="pl-k">|</span> ft</pre></div>
<p>进入 <code>Control Panel\System and Security\Windows Defender Firewall\Allowed apps</code> 添加 private 权限即可</p>
<p>相关文章参考
<a href="https://blog.miniasp.com/post/2021/06/14/Docker-Desktop-for-Windows-Windows-Firewall-Issues" rel="nofollow">https://blog.miniasp.com/post/2021/06/14/Docker-Desktop-for-Windows-Windows-Firewall-Issues</a></p>
]]></description>
                    <pubDate>Sat, 09 Jul 2022 07:35:57 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/bxb100/blog/issues/18</guid>
                <link>https://github.com/bxb100/blog/issues/18</link>
                    <author><![CDATA[bxb100]]></author>
                        <category>Horizon</category>
                        <category>就是玩</category>
            </item>
            <item>
                <title><![CDATA[Dropover 自定义操作的一些 Tips]]></title>
                    <description><![CDATA[<ol>
<li>放在 <code>Application Scripts</code> 文件夹时候注意给<strong>权限,</strong> 否则会报格式异常错误</li>
<li>估计作者调用 unix script 的时候没有给其它 path 的执行环境, 导致只能用 <code>user/bin</code> 下面的命令, 类似 <code>execve</code> ? （不过这里可以用全路径先用着）</li>
<li>如果没有输出有的时候就是 <code>2</code> 导致的原因</li>
</ol>
]]></description>
                    <pubDate>Fri, 01 Jul 2022 17:19:03 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/bxb100/blog/issues/8</guid>
                <link>https://github.com/bxb100/blog/issues/8</link>
                    <author><![CDATA[bxb100]]></author>
                        <category>Horizon</category>
            </item>
            <item>
                <title><![CDATA[Amazon SP program signature problem]]></title>
                    <description><![CDATA[<h2>
<a id="user-content-case" class="anchor" href="#case" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Case</h2>
<p>When us project execute <a href="https://developer-docs.amazon.com/sp-api/docs/listings-items-api-v2021-08-01-reference#getlistingsitem" rel="nofollow">getListingsItem</a>, using SKU name 'FBA XXX XX 300g', but Amazon returns 403 error. At first, we don't get message body like below, we just know it's not successful.</p>
<div class="highlight highlight-source-json"><pre>{
  <span class="pl-ent">"errors"</span>: [
    {
      <span class="pl-ent">"message"</span>: <span class="pl-ii">"The request signature we calculated does not match the signature you provided. Check your AWS Secret Access Key and signing method. Consult the service documentation for details.</span>

<span class="pl-ii">...</span></pre></div>
<h2>
<a id="user-content-using-charles-to-debug" class="anchor" href="#using-charles-to-debug" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Using Charles to debug</h2>
<p>I suppose the HTTP protocol sends the right query param and uses the right path, but I don't know yet, so I choose using Charles to get information. First disable the SSL certificate verifier, and then add Charles proxy.</p>
<div class="highlight highlight-source-java"><pre><span class="pl-k">private</span> <span class="pl-k">static</span> <span class="pl-smi">OkHttpClient</span> <span class="pl-s1">getUnsafeOkHttpClient</span>() {
        <span class="pl-k">try</span> {
            <span class="pl-c">// Create a trust manager that does not validate certificate chains</span>
            <span class="pl-k">final</span> <span class="pl-smi">TrustManager</span>[] <span class="pl-s1">trustAllCerts</span> = <span class="pl-k">new</span> <span class="pl-smi">TrustManager</span>[]{
                <span class="pl-k">new</span> <span class="pl-smi">X509TrustManager</span>() {
                    <span class="pl-c1">@</span><span class="pl-c1">Override</span>
                    <span class="pl-k">public</span> <span class="pl-smi">void</span> <span class="pl-en">checkClientTrusted</span>(<span class="pl-smi">java</span>.<span class="pl-smi">security</span>.<span class="pl-smi">cert</span>.<span class="pl-smi">X509Certificate</span>[] <span class="pl-s1">chain</span>, <span class="pl-smi">String</span> <span class="pl-s1">authType</span>) <span class="pl-k">throws</span> <span class="pl-smi">CertificateException</span> {
                    }

                    <span class="pl-c1">@</span><span class="pl-c1">Override</span>
                    <span class="pl-k">public</span> <span class="pl-smi">void</span> <span class="pl-en">checkServerTrusted</span>(<span class="pl-smi">java</span>.<span class="pl-smi">security</span>.<span class="pl-smi">cert</span>.<span class="pl-smi">X509Certificate</span>[] <span class="pl-s1">chain</span>, <span class="pl-smi">String</span> <span class="pl-s1">authType</span>) <span class="pl-k">throws</span> <span class="pl-smi">CertificateException</span> {
                    }

                    <span class="pl-c1">@</span><span class="pl-c1">Override</span>
                    <span class="pl-k">public</span> <span class="pl-smi">java</span>.<span class="pl-smi">security</span>.<span class="pl-smi">cert</span>.<span class="pl-smi">X509Certificate</span>[] <span class="pl-en">getAcceptedIssuers</span>() {
                        <span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-smi">java</span>.<span class="pl-smi">security</span>.<span class="pl-smi">cert</span>.<span class="pl-smi">X509Certificate</span>[]{};
                    }
                }
            };

            <span class="pl-c">// Install the all-trusting trust manager</span>
            <span class="pl-k">final</span> <span class="pl-smi">SSLContext</span> <span class="pl-s1">sslContext</span> = <span class="pl-c1">SSLContext</span>.<span class="pl-en">getInstance</span>(<span class="pl-s">"SSL"</span>);
            <span class="pl-s1">sslContext</span>.<span class="pl-en">init</span>(<span class="pl-c1">null</span>, <span class="pl-s1">trustAllCerts</span>, <span class="pl-k">new</span> <span class="pl-smi">java</span>.<span class="pl-smi">security</span>.<span class="pl-smi">SecureRandom</span>());
            <span class="pl-c">// Create an ssl socket factory with our all-trusting manager</span>
            <span class="pl-k">final</span> <span class="pl-smi">SSLSocketFactory</span> <span class="pl-s1">sslSocketFactory</span> = <span class="pl-s1">sslContext</span>.<span class="pl-en">getSocketFactory</span>();

            <span class="pl-smi">OkHttpClient</span> <span class="pl-s1">client</span> = <span class="pl-k">new</span> <span class="pl-smi">OkHttpClient</span>();
            <span class="pl-s1">client</span>.<span class="pl-en">setSslSocketFactory</span>(<span class="pl-s1">sslSocketFactory</span>);
            <span class="pl-s1">client</span>.<span class="pl-en">setHostnameVerifier</span>(<span class="pl-k">new</span> <span class="pl-smi">HostnameVerifier</span>() {
                <span class="pl-c1">@</span><span class="pl-c1">Override</span>
                <span class="pl-k">public</span> <span class="pl-smi">boolean</span> <span class="pl-en">verify</span>(<span class="pl-smi">String</span> <span class="pl-s1">hostname</span>, <span class="pl-smi">SSLSession</span> <span class="pl-s1">session</span>) {
                    <span class="pl-k">return</span> <span class="pl-c1">true</span>;
                }
            });
            <span class="pl-s1">client</span>.<span class="pl-en">setProxy</span>(<span class="pl-k">new</span> <span class="pl-smi">Proxy</span>(<span class="pl-smi">Proxy</span>.<span class="pl-s1">Type</span>.<span class="pl-c1">HTTP</span>, <span class="pl-k">new</span> <span class="pl-smi">InetSocketAddress</span>(<span class="pl-s">"127.0.0.1"</span>, <span class="pl-c1">9090</span>)));
            <span class="pl-k">return</span> <span class="pl-s1">client</span>;
        } <span class="pl-k">catch</span> (<span class="pl-smi">Exception</span> <span class="pl-s1">e</span>) {
            <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-smi">RuntimeException</span>(<span class="pl-s1">e</span>);
        }
    }</pre></div>
<p>and then to execute method get error like this</p>
<p><a href="https://user-images.githubusercontent.com/20685961/173632004-2312ee7a-5cb0-4d43-b2c0-8b533b19b17f.png" target="_blank" rel="nofollow"><img src="https://user-images.githubusercontent.com/20685961/173632004-2312ee7a-5cb0-4d43-b2c0-8b533b19b17f.png" alt="image" style="max-width:100%;"></a></p>
<p>It's easy to know the problem occupy in the AWS signer, but why? The path is encoded (compared with postman data), and the signer is double encoding the path variable <sup><a href="#fn-1" id="user-content-fnref-1" data-footnote-ref>1</a></sup> (<code>urlEncode</code> default is <code>true</code>)</p>
<div class="highlight highlight-source-java"><pre><span class="pl-k">protected</span> <span class="pl-smi">String</span> <span class="pl-s1">getCanonicalizedResourcePath</span>(<span class="pl-smi">String</span> <span class="pl-s1">resourcePath</span>, <span class="pl-smi">boolean</span> <span class="pl-s1">urlEncode</span>) {
        <span class="pl-smi">String</span> <span class="pl-s1">value</span> = <span class="pl-s1">resourcePath</span>;
        <span class="pl-k">if</span> (<span class="pl-s1">urlEncode</span>) {
            <span class="pl-s1">value</span> = <span class="pl-c1">SdkHttpUtils</span>.<span class="pl-en">urlEncode</span>(<span class="pl-s1">resourcePath</span>, <span class="pl-c1">true</span>);

            <span class="pl-smi">URI</span> <span class="pl-s1">normalize</span> = <span class="pl-c1">URI</span>.<span class="pl-en">create</span>(<span class="pl-s1">value</span>).<span class="pl-en">normalize</span>();
            <span class="pl-s1">value</span> = <span class="pl-s1">normalize</span>.<span class="pl-en">getRawPath</span>();

            <span class="pl-c">// Normalization can leave a trailing slash at the end of the resource path,</span>
            <span class="pl-c">// even if the input path doesn't end with one. Example input: /foo/bar/.</span>
            <span class="pl-c">// Remove the trailing slash if the input path doesn't end with one.</span>
            <span class="pl-k">if</span> (!<span class="pl-s1">resourcePath</span>.<span class="pl-en">endsWith</span>(<span class="pl-s">"/"</span>) &amp;&amp; <span class="pl-s1">value</span>.<span class="pl-en">endsWith</span>(<span class="pl-s">"/"</span>)) {
                <span class="pl-s1">value</span> = <span class="pl-s1">value</span>.<span class="pl-en">substring</span>(<span class="pl-c1">0</span>, <span class="pl-s1">value</span>.<span class="pl-en">length</span>() - <span class="pl-c1">1</span>);
            }
        }
        <span class="pl-k">if</span> (!<span class="pl-s1">value</span>.<span class="pl-en">startsWith</span>(<span class="pl-s">"/"</span>)) {
            <span class="pl-s1">value</span> = <span class="pl-s">"/"</span> + <span class="pl-s1">value</span>;
        }
        <span class="pl-k">return</span> <span class="pl-s1">value</span>;
    }</pre></div>
<p>Obviously, the code is right, it must be some places give the wrong parameter.</p>
<h2>
<a id="user-content-debug" class="anchor" href="#debug" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Debug</h2>
<p>The best way to pinpoint the breakpoints is the line where the nearest the mistake.
So, give the <code>AWSSigV4Signer#sign</code> one, and start debug session, take a deep look. few methods passed, suddenly I found the <code>path</code> in <code>createCanonicalRequest</code> not right, it's just a plain text of the test sets.</p>
<p>Why?</p>
<p>You know the <code>createCanonicalRequest</code> is the first step, they need encode twice, if you passed a path without encode, then the <code>aws-sdk</code> maximum encode once.</p>
<p><a href="https://user-images.githubusercontent.com/20685961/173635120-5dffa3d0-5046-4bce-b6e4-9df1fd6092c3.png" target="_blank" rel="nofollow"><img src="https://user-images.githubusercontent.com/20685961/173635120-5dffa3d0-5046-4bce-b6e4-9df1fd6092c3.png" alt="image" style="max-width:100%;"></a></p>
<p>Now, you can clearly find the problem is <code>request.getResourcePath()</code></p>
<div class="highlight highlight-source-java"><pre>  <span class="pl-c1">@</span><span class="pl-c1">Override</span>
  <span class="pl-k">public</span> <span class="pl-smi">String</span> <span class="pl-s1">getResourcePath</span>() {
    <span class="pl-k">try</span> {
      <span class="pl-k">return</span> <span class="pl-s1">originalRequest</span>.<span class="pl-en">url</span>().<span class="pl-en">toURI</span>().<span class="pl-en">getPath</span>();
    } <span class="pl-k">catch</span> (<span class="pl-smi">URISyntaxException</span> <span class="pl-s1">e</span>) {
      <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-smi">RuntimeException</span>(<span class="pl-s1">e</span>);
    }
  }</pre></div>
<p>and</p>
<div class="highlight highlight-source-java"><pre>    <span class="pl-c">/**</span>
<span class="pl-c">     * Returns the decoded path component of this URI.</span>
<span class="pl-c">     *</span>
<span class="pl-c">     * &lt;p&gt; The string returned by this method is equal to that returned by the</span>
<span class="pl-c">     * {@link #getRawPath() getRawPath} method except that all sequences of</span>
<span class="pl-c">     * escaped octets are &lt;a href="#decode"&gt;decoded&lt;/a&gt;.  &lt;/p&gt;</span>
<span class="pl-c">     *</span>
<span class="pl-c">     * @return  The decoded path component of this URI,</span>
<span class="pl-c">     *          or {@code null} if the path is undefined</span>
<span class="pl-c">     */</span>
    <span class="pl-k">public</span> <span class="pl-smi">String</span> <span class="pl-s1">getPath</span>() {
        #...
    }</pre></div>
<p>it's so simple, but costed me a bunch of time to solve, feel sad <g-emoji class="g-emoji" alias="cry" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f622.png">😢</g-emoji></p>
<p>bless me to be better <g-emoji class="g-emoji" alias="crossed_fingers" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f91e.png">🤞</g-emoji></p>
<section data-footnotes>
<ol>
<li id="user-content-fn-1">
<p><a href="https://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html#:~:text=Each%20path%20segment%20must%20be%20URI%2Dencoded%20twice" rel="nofollow">https://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html#:~:text=Each%20path%20segment%20must%20be%20URI%2Dencoded%20twice</a> <a href="#fnref-1" data-footnote-backref aria-label="Back to content"><g-emoji class="g-emoji" alias="leftwards_arrow_with_hook" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/21a9.png">↩</g-emoji></a></p>
</li>
</ol>
</section>
]]></description>
                    <pubDate>Tue, 14 Jun 2022 17:19:04 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/bxb100/blog/issues/17</guid>
                <link>https://github.com/bxb100/blog/issues/17</link>
                    <author><![CDATA[bxb100]]></author>
                        <category>DEV</category>
            </item>
            <item>
                <title><![CDATA[GitHub Markdown LaTeX to text technique]]></title>
                    <description><![CDATA[<p>最近发现的若干将 github md math 转为 SVG 的方式</p>
<ol>
<li>github 自己的 render 服务<sup><a href="#fn-1" id="user-content-fnref-1" data-footnote-ref>1</a></sup>
</li>
</ol>
<ul>
<li><code>&lt;img src="https://render.githubusercontent.com/render/math?math=e^{i \pi} = -1"&gt;</code></li>
<li>
<code>![formula](https://render.githubusercontent.com/render/math?math=e^{i%20\pi}%20=%20-1)</code> 这个注意空格</li>
<li>在 github 上还可以切换 dark/light 模式
<ul>
<li>light: <code>&lt;img src="https://render.githubusercontent.com/render/math?math={e^{i \pi} = -1}#gh-light-mode-only"&gt;</code>
</li>
<li>dark: <code>&lt;img src="https://render.githubusercontent.com/render/math?math={\color{white}e^{i \pi} = -1}#gh-dark-mode-only"&gt;</code>
</li>
<li>展示: <a href="https://render.githubusercontent.com/render/math?math=%7Be%5E%7Bi%20%5Cpi%7D%20=%20-1%7D#gh-light-mode-only" target="_blank" rel="nofollow"><img src="https://render.githubusercontent.com/render/math?math=%7Be%5E%7Bi%20%5Cpi%7D%20=%20-1%7D#gh-light-mode-only" style="max-width:100%;"></a><a href="https://render.githubusercontent.com/render/math?math=%7B%5Ccolor%7Bwhite%7De%5E%7Bi%20%5Cpi%7D%20=%20-1%7D#gh-dark-mode-only" target="_blank" rel="nofollow"><img src="https://render.githubusercontent.com/render/math?math=%7B%5Ccolor%7Bwhite%7De%5E%7Bi%20%5Cpi%7D%20=%20-1%7D#gh-dark-mode-only" style="max-width:100%;"></a>
</li>
</ul>
</li>
</ul>
<ol start="2">
<li>使用基于 latex 的 <a href="https://github.com/leegao/readme2tex">readme2tex</a>, 可惜好像没更新了</li>
<li>使用 mathjax-node, 需要注意需要使用 double backslash <sup><a href="#fn-2" id="user-content-fnref-2" data-footnote-ref>2</a></sup>
</li>
</ol>
<section data-footnotes>
<ol>
<li id="user-content-fn-1">
<p><a href="https://gist.github.com/a-rodin/fef3f543412d6e1ec5b6cf55bf197d7b">https://gist.github.com/a-rodin/fef3f543412d6e1ec5b6cf55bf197d7b</a> <a href="#fnref-1" data-footnote-backref aria-label="Back to content"><g-emoji class="g-emoji" alias="leftwards_arrow_with_hook" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/21a9.png">↩</g-emoji></a></p>
</li>
<li id="user-content-fn-2">
<p><a href="http://docs.mathjax.org/en/latest/basic/mathematics.html#putting-math-in-javascript-strings" rel="nofollow">http://docs.mathjax.org/en/latest/basic/mathematics.html#putting-math-in-javascript-strings</a> <a href="#fnref-2" data-footnote-backref aria-label="Back to content"><g-emoji class="g-emoji" alias="leftwards_arrow_with_hook" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/21a9.png">↩</g-emoji></a></p>
</li>
</ol>
</section>
]]></description>
                    <pubDate>Fri, 10 Jun 2022 08:07:05 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/bxb100/blog/issues/12</guid>
                <link>https://github.com/bxb100/blog/issues/12</link>
                    <author><![CDATA[bxb100]]></author>
            </item>
            <item>
                <title><![CDATA[Synergy 连接卡顿]]></title>
                    <description><![CDATA[<p>问题：</p>
<ul>
<li>Client：台式机连接网线</li>
<li>Server：笔记本 WIFI
必然用一段时间卡顿</li>
</ul>
<p>解决方法：
都用网线连接，原理不详</p>
]]></description>
                    <pubDate>Fri, 10 Jun 2022 08:04:09 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/bxb100/blog/issues/16</guid>
                <link>https://github.com/bxb100/blog/issues/16</link>
                    <author><![CDATA[bxb100]]></author>
                        <category>就是玩</category>
            </item>
            <item>
                <title><![CDATA[QNAP 技巧分享]]></title>
                    <description><![CDATA[<ol>
<li>默认的 8080 端口无法在公网环境下访问，可以使用<a href="#issuecomment-1017306273">反向代理来设置</a>
</li>
<li><a href="#issuecomment-1017428570">使用 Cloudflare Worker &amp; KV 来做 DDNS</a></li>
<li>使用 <a href="https://tailscale.com/" rel="nofollow">tailscale</a> 来连接 WebDAV</li>
</ol>
]]></description>
                    <pubDate>Sat, 23 Apr 2022 04:53:35 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/bxb100/blog/issues/9</guid>
                <link>https://github.com/bxb100/blog/issues/9</link>
                    <author><![CDATA[bxb100]]></author>
                        <category>Horizon</category>
            </item>
            <item>
                <title><![CDATA[How to use FluentBit multiline]]></title>
                    <description><![CDATA[<p>One day, my friend asked a question about how to use <a href="https://fluentbit.io/" rel="nofollow">fluentBit </a> (It's popular in k8s <sup><a href="#fn-1" id="user-content-fnref-1" data-footnote-ref>1</a></sup>) to collect Java application logs. I had no idea how to do this at first, but finally the result seems good, so I want to give this tale to introduce the way I walk pasted.</p>
<p><a href="https://user-images.githubusercontent.com/20685961/163699255-57467f29-4d24-4948-aa27-62aa8d3e9b75.png" target="_blank" rel="nofollow"><img src="https://user-images.githubusercontent.com/20685961/163699255-57467f29-4d24-4948-aa27-62aa8d3e9b75.png" alt="Flow" style="max-width:100%;"></a></p>
<p align="center"><em>The config visualizes</em></p>
<p>Usually, the log file pattern seems unified, it looks like</p>
<p><code>2022-04-17 03:10:42.381  INFO 28420 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...</code></p>
<p>You can easily use regex to collect each line into a structure. But when the app throws exceptions, you need to use multiline parser <sup><a href="#fn-2" id="user-content-fnref-2" data-footnote-ref>2</a></sup><sup><a href="#fn-3" id="user-content-fnref-3" data-footnote-ref>3</a></sup>. Briefly, it's caught raw text read line by line, so each line needs to match <a href="https://docs.fluentbit.io/manual/administration/configuring-fluent-bit/multiline-parsing#rules-definition" rel="nofollow">rule</a>, like this:</p>
<pre lang="conf"><code># rules   |   state name   | regex pattern                   | next state
# --------|----------------|---------------------------------------------
rule         "start_state"   "/(Dec \d+ \d+\:\d+\:\d+)(.*)/"   "cont"
rule         "cont"          "/^\s+at.*/"                      "cont"
</code></pre>
<p align="center">
<a href="https://user-images.githubusercontent.com/20685961/163700092-d1875099-1775-4c9a-8926-6fa7b6d0b9d0.png" target="_blank" rel="nofollow"><img src="https://user-images.githubusercontent.com/20685961/163700092-d1875099-1775-4c9a-8926-6fa7b6d0b9d0.png" style="max-width:100%;"></a>
</p><p align="center"><em>Each line pipeline</em></p>

<pre lang="log"><code>2022-04-17 03:10:43.578 ERROR 28420 --- [scheduling-1] o.s.s.s.TaskUtils$LoggingErrorHandler    : Unexpected error occurred in scheduled task.

java.lang.RuntimeException: cs
	at guru.sfg.brewery.config.TaskConfig.throwError(TaskConfig.java:25) ~[classes/:na]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:na]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na]
	at java.base/java.lang.reflect.Method.invoke(Method.java:566) ~[na:na]
	at org.springframework.scheduling.support.ScheduledMethodRunnable.run(ScheduledMethodRunnable.java:84) ~[spring-context-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54) ~[spring-context-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515) ~[na:na]
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305) ~[na:na]
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305) ~[na:na]
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) ~[na:na]
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) ~[na:na]
	at java.base/java.lang.Thread.run(Thread.java:834) ~[na:na]

2022-04-17 03:10:43.591  INFO 28420 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2022-04-17 03:10:43.593  INFO 28420 --- [restartedMain] g.sfg.brewery.SfgBreweryUiApplication    : Started SfgBreweryUiApplication in 2.717 seconds (JVM running for 3.998)
2022-04-17 03:10:43.596  INFO 28420 --- [scheduling-1] o.h.h.i.QueryTranslatorFactoryInitiator  : HHH000397: Using ASTQueryTranslatorFactory
</code></pre>
<p>But how to? The official Doc is good, but in this case, in the default spring logging pattern, log message with break-line, and, in Windows, it's <code>\r\n</code>, Me using windows, so be an attention</p>
<p>So, collusion below (remember when the up satisfied that one can be execute):</p>
<ol>
<li>The start line is simple <code>(\d{4}-\d{2}-\d{2}\s\d+\:\d+\:\d+.\d+)(.*)</code> , <a href="https://rubular.com/r/48Q24T9wXBsle9" rel="nofollow">see</a>
</li>
<li>next is tricky, <a href="https://rubular.com/r/YNoxsscZcVtlbY" rel="nofollow">see</a>
</li>
</ol>
<ul>
<li><code>\r\n</code></li>
<li>
<code>\s</code> + <code>name: default</code>
</li>
</ul>
<ol start="3">
<li>and the next, loop <code>3</code>, <a href="https://rubular.com/r/NXxvOGLOyThUzm" rel="nofollow">see</a>
</li>
</ol>
<ul>
<li>
<code>\s</code> + <code>...]</code>
</li>
<li><code>xxx.xxx.xxException</code></li>
<li>
<code>\s</code> + <code>at XXXX</code>
</li>
</ul>
<p>In the end, the exception snippet will produce a single line, you can use filter to exclude this.</p>
<p>gist: <a href="https://gist.github.com/bxb100/de46e5f708d03d509430d4767806fb14">https://gist.github.com/bxb100/de46e5f708d03d509430d4767806fb14</a></p>
<h2>
<a id="user-content-other-thing" class="anchor" href="#other-thing" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Other thing</h2>
<p>Using docker needs packing by yourself <sup><a href="#fn-4" id="user-content-fnref-4" data-footnote-ref>4</a></sup>, don't forget it should with ES under same network <sup><a href="#fn-5" id="user-content-fnref-5" data-footnote-ref>5</a></sup></p>
<ol>
<li>build an image</li>
</ol>
<div class="highlight highlight-source-dockerfile"><pre><span class="pl-k">FROM</span> fluent/fluent-bit:1.9.0
<span class="pl-k">ADD</span> parsers_multiline.conf /fluent-bit/etc/
<span class="pl-k">ADD</span> fluent-bit.conf /fluent-bit/etc/</pre></div>
<p><code>docker build -t fluentbit-cs:sim .</code></p>
<p><code>docker run -id --name fluent -v /e/docker/fluentBit/log:/var/log --network 8x_default fluentbit-cs:sim</code></p>
<ol start="2">
<li>mount config to <code>/fluent-bit/etc</code>
</li>
</ol>
<p><code>docker run -id --name fluent -v /e/docker/fluentBit/log:/var/log -v /e/docker/fluentBit/config:/fluent-bit/etc --network 8x_default fluent/fluent-bit:1.9.0</code></p>
<hr>
<p>If you are missing <code>cont2</code> rule, the ES log will trigger exception like single document, it's not combined with log message</p>
<p><a href="https://user-images.githubusercontent.com/20685961/163700773-a1c6520b-4830-4700-ad19-0d100b72db60.png" target="_blank" rel="nofollow"><img src="https://user-images.githubusercontent.com/20685961/163700773-a1c6520b-4830-4700-ad19-0d100b72db60.png" alt="image" style="max-width:100%;"></a></p>
<p align="center"><em>Obviously It's not my wanted type</em></p>
<section data-footnotes>
<ol>
<li id="user-content-fn-1">
<p><a href="https://gist.github.com/StevenACoffman/4e267f0f60c8e7fcb3f77b9e504f3bd7">https://gist.github.com/StevenACoffman/4e267f0f60c8e7fcb3f77b9e504f3bd7</a> fluent-filebeat-comparison <a href="#fnref-1" data-footnote-backref aria-label="Back to content"><g-emoji class="g-emoji" alias="leftwards_arrow_with_hook" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/21a9.png">↩</g-emoji></a></p>
</li>
<li id="user-content-fn-2">
<p><a href="https://docs.fluentbit.io/manual/administration/configuring-fluent-bit/multiline-parsing" rel="nofollow">https://docs.fluentbit.io/manual/administration/configuring-fluent-bit/multiline-parsing</a> <a href="#fnref-2" data-footnote-backref aria-label="Back to content"><g-emoji class="g-emoji" alias="leftwards_arrow_with_hook" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/21a9.png">↩</g-emoji></a></p>
</li>
<li id="user-content-fn-3">
<p><a href="https://docs.fluentbit.io/manual/pipeline/inputs/tail" rel="nofollow">https://docs.fluentbit.io/manual/pipeline/inputs/tail</a> Tail input <a href="#fnref-3" data-footnote-backref aria-label="Back to content"><g-emoji class="g-emoji" alias="leftwards_arrow_with_hook" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/21a9.png">↩</g-emoji></a></p>
</li>
<li id="user-content-fn-4">
<p><a href="https://kevcodez.de/posts/2019-08-10-fluent-bit-docker-logging-driver-elasticsearch/" rel="nofollow">https://kevcodez.de/posts/2019-08-10-fluent-bit-docker-logging-driver-elasticsearch/</a> <a href="#fnref-4" data-footnote-backref aria-label="Back to content"><g-emoji class="g-emoji" alias="leftwards_arrow_with_hook" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/21a9.png">↩</g-emoji></a></p>
</li>
<li id="user-content-fn-5">
<p><a href="https://juejin.cn/post/6844903847383547911" rel="nofollow">https://juejin.cn/post/6844903847383547911</a> <a href="#fnref-5" data-footnote-backref aria-label="Back to content"><g-emoji class="g-emoji" alias="leftwards_arrow_with_hook" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/21a9.png">↩</g-emoji></a></p>
</li>
</ol>
</section>
]]></description>
                    <pubDate>Sun, 17 Apr 2022 08:01:33 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/bxb100/blog/issues/15</guid>
                <link>https://github.com/bxb100/blog/issues/15</link>
                    <author><![CDATA[bxb100]]></author>
                        <category>DEV</category>
            </item>
            <item>
                <title><![CDATA[实现 TDD 的一些捷径]]></title>
                    <description><![CDATA[<h2>
<a id="user-content-tools" class="anchor" href="#tools" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Tools</h2>
<h3>
<a id="user-content-idea" class="anchor" href="#idea" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>idea</h3>
<ul>
<li>打开 toggle auto-test <a href="https://user-images.githubusercontent.com/20685961/162027045-d3259d53-70d2-4e48-8e0c-f3a992e180e5.png" target="_blank" rel="nofollow"><img src="https://user-images.githubusercontent.com/20685961/162027045-d3259d53-70d2-4e48-8e0c-f3a992e180e5.png" width="20" height="20" style="max-width:100%;"></a>, 然后由于是编译的时候触发操作, 所以可以取消 save all <code>ctrl + s</code>  快捷键(依赖自动保存), 然后将其设置到 build project 中.</li>
<li>也可以打开 auto compile 但是实测有延迟, 而且会加重心智负担</li>
</ul>
<p align="center">
<a href="https://user-images.githubusercontent.com/20685961/162026667-654a24f6-8065-430e-aeaa-0b26fc59ab4b.png" target="_blank" rel="nofollow"><img src="https://user-images.githubusercontent.com/20685961/162026667-654a24f6-8065-430e-aeaa-0b26fc59ab4b.png" style="max-width:100%;"></a>
</p>
]]></description>
                    <pubDate>Wed, 06 Apr 2022 16:57:40 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/bxb100/blog/issues/14</guid>
                <link>https://github.com/bxb100/blog/issues/14</link>
                    <author><![CDATA[bxb100]]></author>
                        <category>DEV</category>
            </item>
            <item>
                <title><![CDATA[使用 N_m3u8DL-CLI 简化下载 m3u8 流程]]></title>
                    <description><![CDATA[<p><a href="https://github.com/nilaoda/N_m3u8DL-CLI">N_m3u8DL-CLI</a> 是一个比较好用的 m3u8 下载工具, 但是它是 NET 写成的, 我懒得改成 JAVA, 想着白嫖 GitHub Action 来中转下载</p>
<p>写了个脚本直接 re 页面中 m3u8 后缀连接, 然后调用 CLI 下载, 可以直接放在 release 中或者传到 webdav 中, 感觉更安全了 <g-emoji class="g-emoji" alias="rofl" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f923.png">🤣</g-emoji></p>
<p>当然, 如果是在 win 机上, 那么直接 execute ps1 更简单</p>
<p><a href="https://github.com/bxb100/OSS-Config/blob/main/Win/execute.ps1"><g-emoji class="g-emoji" alias="point_right" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png">👉</g-emoji> 脚本地址</a></p>
<p>参数:</p>
<ol>
<li>
<code>-URI</code>: 参数唯一, 默认为 URI, 如果参数为空, 默认从 env 环境变量中取值, 所以塞值的时候需要 <code>$env:xxx</code>
</li>
<li>
<code>-Proxy</code>: 代理地址</li>
<li>
<code>-Extra</code>: N_m3u8DL-CLI 其它参数, 形如 <code>'--saveName filename --timeOut 1000'</code> 注意单引号字符串传入</li>
</ol>
]]></description>
                    <pubDate>Mon, 04 Apr 2022 03:54:05 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/bxb100/blog/issues/13</guid>
                <link>https://github.com/bxb100/blog/issues/13</link>
                    <author><![CDATA[bxb100]]></author>
            </item>
            <item>
                <title><![CDATA[github action 相关信息]]></title>
                    <description><![CDATA[<ul>
<li><a href="https://docs.github.com/en/repositories/releasing-projects-on-github/automatically-generated-release-notes">生成 release log automatically-generated-release-notes</a></li>
<li><a href="#issuecomment-1008555315">Anyway to check the error message and retry?</a></li>
<li><a href="#issuecomment-1008555105">输入输出多行</a></li>
</ul>
]]></description>
                    <pubDate>Wed, 12 Jan 2022 12:14:32 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/bxb100/blog/issues/7</guid>
                <link>https://github.com/bxb100/blog/issues/7</link>
                    <author><![CDATA[bxb100]]></author>
                        <category>API</category>
            </item>
            <item>
                <title><![CDATA[安迪·威尔-挽救计划]]></title>
                    <description><![CDATA[<p>挽救计划是我近来看的最能人看下去的科幻小说, 非常刺激, 引人入胜.</p>
<details>
<summary>===剧透警告===</summary>
<hr>
<p>一开始的从我是谁闪回记忆, 从侧面介绍了格雷斯性格, 以及整个事件的起因. 在宇宙的大环境下, 痛失队友, 失忆, 不禁让人思考这一行程到底是来做什么的. 这时候我以为他是一个牺牲小我的英雄, 这个和后面的填坑产生一波小高潮.</p>
<p>此后我们逐步了解到此行是为了解决噬星体危机, 这几章写的有点"无趣".</p>
<p>后面遇到波江星人基德无疑是一个高潮, 语言的对接, 拥有相同的使命, 逐渐发展的外星友情, 过程中解决危机做出的一些理性操作也很有趣.</p>
<p>最棒的是, 当我一直为格雷斯无私牺牲的精神感动的时候, 才发现他被迫参与任务, 之前的失忆也是注射药物导致的, 但是这也在后面为解救外星友人升华了内核. 也描述出了尽管他之前面对死亡是胆怯的, 但是当他真正去面对的时候, 又不会轻言放弃.</p>
<p>最后Vℓ章(波江星纪年), 当 53 岁的格雷斯知道自己完成了使命, 拯救了太阳, 回到波江座星的教室, 面对幼年波江座人说道</p>
<blockquote>
<p>“你们谁能告诉我光速是多少？”</p>
<p>12个孩子举起了手爪。”</p>
</blockquote>
<p>和前面几章侧面描写首尾呼应.</p>
<hr>
</details>
<p>人类的赞歌是勇气铺就而成的</p>
]]></description>
                    <pubDate>Mon, 10 Jan 2022 05:45:59 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/bxb100/blog/issues/4</guid>
                <link>https://github.com/bxb100/blog/issues/4</link>
                    <author><![CDATA[bxb100]]></author>
                        <category>读后感</category>
            </item>
            <item>
                <title><![CDATA[DUNE-0]]></title>
                    <description><![CDATA[Empty]]></description>
                    <pubDate>Sat, 01 Jan 2022 13:35:05 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/bxb100/blog/releases/tag/DUNE?p&#x3D;0</guid>
                <link>https://github.com/bxb100/blog/releases/tag/DUNE?p&#x3D;0</link>
                        <enclosure url="https://github.com/bxb100/blog/releases/download/DUNE/Dune.-.01-889587703.mp3" length="64683362" type="audio/mpeg" />
                        <itunes:image href="https://cdn.jsdelivr.net/gh/bxb100/bxb100@master/png2.png" />
                    <author><![CDATA[bxb100]]></author>
                    <category>Podcast</category>
            </item>
            <item>
                <title><![CDATA[DUNE-1]]></title>
                    <description><![CDATA[Empty]]></description>
                    <pubDate>Sat, 01 Jan 2022 13:35:04 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/bxb100/blog/releases/tag/DUNE?p&#x3D;1</guid>
                <link>https://github.com/bxb100/blog/releases/tag/DUNE?p&#x3D;1</link>
                        <enclosure url="https://github.com/bxb100/blog/releases/download/DUNE/Dune.-.02-889587691.mp3" length="72694803" type="audio/mpeg" />
                        <itunes:image href="https://cdn.jsdelivr.net/gh/bxb100/bxb100@master/png2.png" />
                    <author><![CDATA[bxb100]]></author>
                    <category>Podcast</category>
            </item>
            <item>
                <title><![CDATA[DUNE-2]]></title>
                    <description><![CDATA[Empty]]></description>
                    <pubDate>Sat, 01 Jan 2022 13:35:03 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/bxb100/blog/releases/tag/DUNE?p&#x3D;2</guid>
                <link>https://github.com/bxb100/blog/releases/tag/DUNE?p&#x3D;2</link>
                        <enclosure url="https://github.com/bxb100/blog/releases/download/DUNE/Dune.-.03-889587682.mp3" length="70712841" type="audio/mpeg" />
                        <itunes:image href="https://cdn.jsdelivr.net/gh/bxb100/bxb100@master/png2.png" />
                    <author><![CDATA[bxb100]]></author>
                    <category>Podcast</category>
            </item>
            <item>
                <title><![CDATA[DUNE-3]]></title>
                    <description><![CDATA[Empty]]></description>
                    <pubDate>Sat, 01 Jan 2022 13:35:02 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/bxb100/blog/releases/tag/DUNE?p&#x3D;3</guid>
                <link>https://github.com/bxb100/blog/releases/tag/DUNE?p&#x3D;3</link>
                        <enclosure url="https://github.com/bxb100/blog/releases/download/DUNE/Dune.-.04-889587673.mp3" length="70724126" type="audio/mpeg" />
                        <itunes:image href="https://cdn.jsdelivr.net/gh/bxb100/bxb100@master/png2.png" />
                    <author><![CDATA[bxb100]]></author>
                    <category>Podcast</category>
            </item>
            <item>
                <title><![CDATA[DUNE-4]]></title>
                    <description><![CDATA[Empty]]></description>
                    <pubDate>Sat, 01 Jan 2022 13:35:01 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/bxb100/blog/releases/tag/DUNE?p&#x3D;4</guid>
                <link>https://github.com/bxb100/blog/releases/tag/DUNE?p&#x3D;4</link>
                        <enclosure url="https://github.com/bxb100/blog/releases/download/DUNE/Dune.-.05-889587658.mp3" length="67795904" type="audio/mpeg" />
                        <itunes:image href="https://cdn.jsdelivr.net/gh/bxb100/bxb100@master/png2.png" />
                    <author><![CDATA[bxb100]]></author>
                    <category>Podcast</category>
            </item>
            <item>
                <title><![CDATA[DUNE-5]]></title>
                    <description><![CDATA[Empty]]></description>
                    <pubDate>Sat, 01 Jan 2022 13:35:00 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/bxb100/blog/releases/tag/DUNE?p&#x3D;5</guid>
                <link>https://github.com/bxb100/blog/releases/tag/DUNE?p&#x3D;5</link>
                        <enclosure url="https://github.com/bxb100/blog/releases/download/DUNE/Dune.-.06-889587646.mp3" length="72743705" type="audio/mpeg" />
                        <itunes:image href="https://cdn.jsdelivr.net/gh/bxb100/bxb100@master/png2.png" />
                    <author><![CDATA[bxb100]]></author>
                    <category>Podcast</category>
            </item>
            <item>
                <title><![CDATA[DUNE-6]]></title>
                    <description><![CDATA[Empty]]></description>
                    <pubDate>Sat, 01 Jan 2022 13:34:59 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/bxb100/blog/releases/tag/DUNE?p&#x3D;6</guid>
                <link>https://github.com/bxb100/blog/releases/tag/DUNE?p&#x3D;6</link>
                        <enclosure url="https://github.com/bxb100/blog/releases/download/DUNE/Dune.-.07-889587631.mp3" length="70060825" type="audio/mpeg" />
                        <itunes:image href="https://cdn.jsdelivr.net/gh/bxb100/bxb100@master/png2.png" />
                    <author><![CDATA[bxb100]]></author>
                    <category>Podcast</category>
            </item>
            <item>
                <title><![CDATA[DUNE-7]]></title>
                    <description><![CDATA[Empty]]></description>
                    <pubDate>Sat, 01 Jan 2022 13:34:58 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/bxb100/blog/releases/tag/DUNE?p&#x3D;7</guid>
                <link>https://github.com/bxb100/blog/releases/tag/DUNE?p&#x3D;7</link>
                        <enclosure url="https://github.com/bxb100/blog/releases/download/DUNE/Dune.-.08-889587616.mp3" length="73733432" type="audio/mpeg" />
                        <itunes:image href="https://cdn.jsdelivr.net/gh/bxb100/bxb100@master/png2.png" />
                    <author><![CDATA[bxb100]]></author>
                    <category>Podcast</category>
            </item>
            <item>
                <title><![CDATA[DUNE-8]]></title>
                    <description><![CDATA[Empty]]></description>
                    <pubDate>Sat, 01 Jan 2022 13:34:57 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/bxb100/blog/releases/tag/DUNE?p&#x3D;8</guid>
                <link>https://github.com/bxb100/blog/releases/tag/DUNE?p&#x3D;8</link>
                        <enclosure url="https://github.com/bxb100/blog/releases/download/DUNE/Dune.-.09-889587595.mp3" length="71213974" type="audio/mpeg" />
                        <itunes:image href="https://cdn.jsdelivr.net/gh/bxb100/bxb100@master/png2.png" />
                    <author><![CDATA[bxb100]]></author>
                    <category>Podcast</category>
            </item>
            <item>
                <title><![CDATA[DUNE-9]]></title>
                    <description><![CDATA[Empty]]></description>
                    <pubDate>Sat, 01 Jan 2022 13:34:56 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/bxb100/blog/releases/tag/DUNE?p&#x3D;9</guid>
                <link>https://github.com/bxb100/blog/releases/tag/DUNE?p&#x3D;9</link>
                        <enclosure url="https://github.com/bxb100/blog/releases/download/DUNE/Dune.-.10-889587586.mp3" length="72066193" type="audio/mpeg" />
                        <itunes:image href="https://cdn.jsdelivr.net/gh/bxb100/bxb100@master/png2.png" />
                    <author><![CDATA[bxb100]]></author>
                    <category>Podcast</category>
            </item>
            <item>
                <title><![CDATA[DUNE-10]]></title>
                    <description><![CDATA[Empty]]></description>
                    <pubDate>Sat, 01 Jan 2022 13:34:55 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/bxb100/blog/releases/tag/DUNE?p&#x3D;10</guid>
                <link>https://github.com/bxb100/blog/releases/tag/DUNE?p&#x3D;10</link>
                        <enclosure url="https://github.com/bxb100/blog/releases/download/DUNE/Dune.-.11-889587565.mp3" length="72967313" type="audio/mpeg" />
                        <itunes:image href="https://cdn.jsdelivr.net/gh/bxb100/bxb100@master/png2.png" />
                    <author><![CDATA[bxb100]]></author>
                    <category>Podcast</category>
            </item>
            <item>
                <title><![CDATA[DUNE-11]]></title>
                    <description><![CDATA[Empty]]></description>
                    <pubDate>Sat, 01 Jan 2022 13:34:54 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/bxb100/blog/releases/tag/DUNE?p&#x3D;11</guid>
                <link>https://github.com/bxb100/blog/releases/tag/DUNE?p&#x3D;11</link>
                        <enclosure url="https://github.com/bxb100/blog/releases/download/DUNE/Dune.-.12-889587541.mp3" length="69729801" type="audio/mpeg" />
                        <itunes:image href="https://cdn.jsdelivr.net/gh/bxb100/bxb100@master/png2.png" />
                    <author><![CDATA[bxb100]]></author>
                    <category>Podcast</category>
            </item>
            <item>
                <title><![CDATA[DUNE-12]]></title>
                    <description><![CDATA[Empty]]></description>
                    <pubDate>Sat, 01 Jan 2022 13:34:53 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/bxb100/blog/releases/tag/DUNE?p&#x3D;12</guid>
                <link>https://github.com/bxb100/blog/releases/tag/DUNE?p&#x3D;12</link>
                        <enclosure url="https://github.com/bxb100/blog/releases/download/DUNE/Dune.-.13-889587511.mp3" length="63116433" type="audio/mpeg" />
                        <itunes:image href="https://cdn.jsdelivr.net/gh/bxb100/bxb100@master/png2.png" />
                    <author><![CDATA[bxb100]]></author>
                    <category>Podcast</category>
            </item>
            <item>
                <title><![CDATA[DUNE-13]]></title>
                    <description><![CDATA[Empty]]></description>
                    <pubDate>Sat, 01 Jan 2022 13:34:52 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/bxb100/blog/releases/tag/DUNE?p&#x3D;13</guid>
                <link>https://github.com/bxb100/blog/releases/tag/DUNE?p&#x3D;13</link>
                        <enclosure url="https://github.com/bxb100/blog/releases/download/DUNE/Dune.-.14-889587499.mp3" length="57467714" type="audio/mpeg" />
                        <itunes:image href="https://cdn.jsdelivr.net/gh/bxb100/bxb100@master/png2.png" />
                    <author><![CDATA[bxb100]]></author>
                    <category>Podcast</category>
            </item>
            <item>
                <title><![CDATA[DUNE-14]]></title>
                    <description><![CDATA[Empty]]></description>
                    <pubDate>Sat, 01 Jan 2022 13:34:51 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/bxb100/blog/releases/tag/DUNE?p&#x3D;14</guid>
                <link>https://github.com/bxb100/blog/releases/tag/DUNE?p&#x3D;14</link>
                        <enclosure url="https://github.com/bxb100/blog/releases/download/DUNE/Dune.-.15-889587478.mp3" length="66124067" type="audio/mpeg" />
                        <itunes:image href="https://cdn.jsdelivr.net/gh/bxb100/bxb100@master/png2.png" />
                    <author><![CDATA[bxb100]]></author>
                    <category>Podcast</category>
            </item>
            <item>
                <title><![CDATA[DUNE-15]]></title>
                    <description><![CDATA[Empty]]></description>
                    <pubDate>Sat, 01 Jan 2022 13:34:50 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/bxb100/blog/releases/tag/DUNE?p&#x3D;15</guid>
                <link>https://github.com/bxb100/blog/releases/tag/DUNE?p&#x3D;15</link>
                        <enclosure url="https://github.com/bxb100/blog/releases/download/DUNE/Dune.-.16-889587466.mp3" length="46723238" type="audio/mpeg" />
                        <itunes:image href="https://cdn.jsdelivr.net/gh/bxb100/bxb100@master/png2.png" />
                    <author><![CDATA[bxb100]]></author>
                    <category>Podcast</category>
            </item>
            <item>
                <title><![CDATA[DUNE-16]]></title>
                    <description><![CDATA[Empty]]></description>
                    <pubDate>Sat, 01 Jan 2022 13:34:49 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/bxb100/blog/releases/tag/DUNE?p&#x3D;16</guid>
                <link>https://github.com/bxb100/blog/releases/tag/DUNE?p&#x3D;16</link>
                        <enclosure url="https://github.com/bxb100/blog/releases/download/DUNE/Dune.-.17-889587460.mp3" length="71421282" type="audio/mpeg" />
                        <itunes:image href="https://cdn.jsdelivr.net/gh/bxb100/bxb100@master/png2.png" />
                    <author><![CDATA[bxb100]]></author>
                    <category>Podcast</category>
            </item>
            <item>
                <title><![CDATA[DUNE-17]]></title>
                    <description><![CDATA[Empty]]></description>
                    <pubDate>Sat, 01 Jan 2022 13:34:48 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/bxb100/blog/releases/tag/DUNE?p&#x3D;17</guid>
                <link>https://github.com/bxb100/blog/releases/tag/DUNE?p&#x3D;17</link>
                        <enclosure url="https://github.com/bxb100/blog/releases/download/DUNE/Dune.-.18-889587448.mp3" length="57753599" type="audio/mpeg" />
                        <itunes:image href="https://cdn.jsdelivr.net/gh/bxb100/bxb100@master/png2.png" />
                    <author><![CDATA[bxb100]]></author>
                    <category>Podcast</category>
            </item>
            <item>
                <title><![CDATA[Java 程序死锁问题原理及解决方案]]></title>
                    <description><![CDATA[<blockquote>
<p>原文: <a href="https://www.ibm.com/developerworks/cn/java/j-lo-deadlock/" rel="nofollow">https://www.ibm.com/developerworks/cn/java/j-lo-deadlock/</a></p>
</blockquote>
<hr>
<p>Java 语言通过 synchronized 关键字来保证原子性，这是因为每一个 Object 都有一个隐含的锁，这个也称作监视器对象。在进入 synchronized 之前自动获取此内部锁，而一旦离开此方式，无论是完成或者中断都会自动释放锁。显然这是一个独占锁，每个锁请求之间是互斥的。相对于众多高级锁 (Lock/ReadWriteLock 等)，synchronized 的代价都比后者要高。但是 synchronzied 的语法比较简单，而且也比较容易使用和理解。Lock 一旦调用了 lock() 方法获取到锁而未正确释放的话很有可能造成死锁，所以 Lock 的释放操作总是跟在 finally 代码块里面，这在代码结构上也是一次调整和冗余。Lock 的实现已经将硬件资源用到了极致，所以未来可优化的空间不大，除非硬件有了更高的性能，但是 synchronized 只是规范的一种实现，这在不同的平台不同的硬件还有很高的提升空间，未来 Java 锁上的优化也会主要在这上面。既然 synchronzied 都不可能避免死锁产生，那么死锁情况会是经常容易出现的错误，下面具体描述死锁发生的原因及解决方法。</p>
<h1>
<a id="user-content-死锁描述" class="anchor" href="#%E6%AD%BB%E9%94%81%E6%8F%8F%E8%BF%B0" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>死锁描述</h1>
<p>死锁是操作系统层面的一个错误，是进程死锁的简称，最早在 1965 年由 Dijkstra 在研究银行家算法时提出的，它是计算机操作系统乃至整个并发程序设计领域最难处理的问题之一。</p>
<p>事实上，计算机世界有很多事情需要多线程方式去解决，因为这样才能最大程度上利用资源，才能体现出计算的高效。但是，实际上来说，计算机系统中有很多一次只能由一个进程使用的资源的情况，例如打印机，同时只能有一个进程控制它。在多通道程序设计环境中，若干进程往往要共享这类资源，而且一个进程所需要的资源还很有可能不止一个。因此，就会出现若干进程竞争有限资源，又推进顺序不当，从而构成无限期循环等待的局面。我们称这种状态为死锁。简单一点描述，死锁是指多个进程循环等待它方占有的资源而无限期地僵持下去的局面。很显然，如果没有外力的作用，那么死锁涉及到的各个进程都将永远处于封锁状态。</p>
<p>系统发生死锁现象不仅浪费大量的系统资源，甚至导致整个系统崩溃，带来灾难性后果。所以，对于死锁问题在理论上和技术上都必须予以高度重视。</p>
<h2>
<a id="user-content-银行家算法" class="anchor" href="#%E9%93%B6%E8%A1%8C%E5%AE%B6%E7%AE%97%E6%B3%95" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>银行家算法</h2>
<p>一个银行家如何将一定数目的资金安全地借给若干个客户，使这些客户既能借到钱完成要干的事，同时银行家又能收回全部资金而不至于破产。银行家就像一个操作系统，客户就像运行的进程，银行家的资金就是系统的资源。</p>
<p>银行家算法需要确保以下四点：</p>
<p>当一个顾客对资金的最大需求量不超过银行家现有的资金时就可接纳该顾客；
顾客可以分期贷款, 但贷款的总数不能超过最大需求量；
当银行家现有的资金不能满足顾客尚需的贷款数额时，对顾客的贷款可推迟支付，但总能使顾客在有限的时间里得到贷款；
当顾客得到所需的全部资金后，一定能在有限的时间里归还所有的资金。</p>
<h3>
<a id="user-content-清单-1-银行家算法实现" class="anchor" href="#%E6%B8%85%E5%8D%95-1-%E9%93%B6%E8%A1%8C%E5%AE%B6%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>清单 1. 银行家算法实现</h3>
<div class="highlight highlight-source-java"><pre><span class="pl-c">/*一共有５个进程需要请求资源，有３类资源*/</span>
<span class="pl-k">public</span> <span class="pl-k">class</span> <span class="pl-smi">BankDemo</span> {
    <span class="pl-c">// 每个进程所需要的最大资源数 </span>
    <span class="pl-k">public</span> <span class="pl-k">static</span> <span class="pl-smi">int</span>[][] <span class="pl-c1">MAX</span> = {{<span class="pl-c1">7</span>, <span class="pl-c1">5</span>, <span class="pl-c1">3</span>}, {<span class="pl-c1">3</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>}, {<span class="pl-c1">9</span>, <span class="pl-c1">0</span>, <span class="pl-c1">2</span>},
            {<span class="pl-c1">2</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>}, {<span class="pl-c1">4</span>, <span class="pl-c1">3</span>, <span class="pl-c1">3</span>}};
    <span class="pl-c">// 系统拥有的初始资源数 </span>
    <span class="pl-k">public</span> <span class="pl-k">static</span> <span class="pl-smi">int</span>[] <span class="pl-c1">AVAILABLE</span> = {<span class="pl-c1">10</span>, <span class="pl-c1">5</span>, <span class="pl-c1">7</span>};
    <span class="pl-c">// 系统已给每个进程分配的资源数 </span>
    <span class="pl-k">public</span> <span class="pl-k">static</span> <span class="pl-smi">int</span>[][] <span class="pl-c1">ALLOCATION</span> = {{<span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>}, {<span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>}, {<span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>},
            {<span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>}, {<span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>}};
    <span class="pl-c">// 每个进程还需要的资源数 </span>
    <span class="pl-k">public</span> <span class="pl-k">static</span> <span class="pl-smi">int</span>[][] <span class="pl-c1">NEED</span> = {{<span class="pl-c1">7</span>, <span class="pl-c1">5</span>, <span class="pl-c1">3</span>}, {<span class="pl-c1">3</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>}, {<span class="pl-c1">9</span>, <span class="pl-c1">0</span>, <span class="pl-c1">2</span>},
            {<span class="pl-c1">2</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>}, {<span class="pl-c1">4</span>, <span class="pl-c1">3</span>, <span class="pl-c1">3</span>}};
    <span class="pl-c">// 每次申请的资源数 </span>
    <span class="pl-k">public</span> <span class="pl-k">static</span> <span class="pl-smi">int</span>[] <span class="pl-s1">Request</span> = {<span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>};
    <span class="pl-c">// 进程数与资源数 </span>
    <span class="pl-k">public</span> <span class="pl-k">static</span> <span class="pl-smi">int</span> <span class="pl-s1">M</span> = <span class="pl-c1">5</span>, <span class="pl-s1">N</span> = <span class="pl-c1">3</span>;
    <span class="pl-smi">int</span> <span class="pl-c1">FALSE</span> = <span class="pl-c1">0</span>;
    <span class="pl-smi">int</span> <span class="pl-c1">TRUE</span> = <span class="pl-c1">1</span>;

    <span class="pl-k">public</span> <span class="pl-smi">void</span> <span class="pl-en">showdata</span>() {
        <span class="pl-smi">int</span> <span class="pl-s1">i</span>, <span class="pl-s1">j</span>;
        <span class="pl-smi">System</span>.<span class="pl-s1">out</span>.<span class="pl-en">print</span>(<span class="pl-s">"系统可用的资源数为:/n"</span>);
        <span class="pl-k">for</span> (<span class="pl-s1">j</span> = <span class="pl-c1">0</span>; <span class="pl-s1">j</span> &lt; <span class="pl-s1">N</span>; <span class="pl-s1">j</span>++) {
            <span class="pl-smi">System</span>.<span class="pl-s1">out</span>.<span class="pl-en">print</span>(<span class="pl-s">"资源"</span> + <span class="pl-s1">j</span> + <span class="pl-s">":"</span> + <span class="pl-c1">AVAILABLE</span>[<span class="pl-s1">j</span>] + <span class="pl-s">" "</span>);
        }
        <span class="pl-smi">System</span>.<span class="pl-s1">out</span>.<span class="pl-en">println</span>();
        <span class="pl-smi">System</span>.<span class="pl-s1">out</span>.<span class="pl-en">println</span>(<span class="pl-s">"各进程还需要的资源量:"</span>);
        <span class="pl-k">for</span> (<span class="pl-s1">i</span> = <span class="pl-c1">0</span>; <span class="pl-s1">i</span> &lt; <span class="pl-s1">M</span>; <span class="pl-s1">i</span>++) {
            <span class="pl-smi">System</span>.<span class="pl-s1">out</span>.<span class="pl-en">print</span>(<span class="pl-s">"进程"</span> + <span class="pl-s1">i</span> + <span class="pl-s">":"</span>);
            <span class="pl-k">for</span> (<span class="pl-s1">j</span> = <span class="pl-c1">0</span>; <span class="pl-s1">j</span> &lt; <span class="pl-s1">N</span>; <span class="pl-s1">j</span>++) {
                <span class="pl-smi">System</span>.<span class="pl-s1">out</span>.<span class="pl-en">print</span>(<span class="pl-s">"资源"</span> + <span class="pl-s1">j</span> + <span class="pl-s">":"</span> + <span class="pl-c1">NEED</span>[<span class="pl-s1">i</span>][<span class="pl-s1">j</span>] + <span class="pl-s">" "</span>);
            }
            <span class="pl-smi">System</span>.<span class="pl-s1">out</span>.<span class="pl-en">print</span>(<span class="pl-s">"/n"</span>);
        }
        <span class="pl-smi">System</span>.<span class="pl-s1">out</span>.<span class="pl-en">print</span>(<span class="pl-s">"各进程已经得到的资源量: /n"</span>);
        <span class="pl-k">for</span> (<span class="pl-s1">i</span> = <span class="pl-c1">0</span>; <span class="pl-s1">i</span> &lt; <span class="pl-s1">M</span>; <span class="pl-s1">i</span>++) {
            <span class="pl-smi">System</span>.<span class="pl-s1">out</span>.<span class="pl-en">print</span>(<span class="pl-s">"进程"</span>);
            <span class="pl-smi">System</span>.<span class="pl-s1">out</span>.<span class="pl-en">print</span>(<span class="pl-s1">i</span>);
            <span class="pl-k">for</span> (<span class="pl-s1">j</span> = <span class="pl-c1">0</span>; <span class="pl-s1">j</span> &lt; <span class="pl-s1">N</span>; <span class="pl-s1">j</span>++) {
                <span class="pl-smi">System</span>.<span class="pl-s1">out</span>.<span class="pl-en">print</span>(<span class="pl-s">"资源"</span> + <span class="pl-s1">j</span> + <span class="pl-s">":"</span> + <span class="pl-c1">ALLOCATION</span>[<span class="pl-s1">i</span>][<span class="pl-s1">j</span>] + <span class="pl-s">" "</span>);
            }
            <span class="pl-smi">System</span>.<span class="pl-s1">out</span>.<span class="pl-en">print</span>(<span class="pl-s">"/n"</span>);
        }
    }

    <span class="pl-c">// 分配资源，并重新更新各种状态 </span>
    <span class="pl-k">public</span> <span class="pl-smi">void</span> <span class="pl-en">changdata</span>(<span class="pl-smi">int</span> <span class="pl-s1">k</span>) {
        <span class="pl-smi">int</span> <span class="pl-s1">j</span>;
        <span class="pl-k">for</span> (<span class="pl-s1">j</span> = <span class="pl-c1">0</span>; <span class="pl-s1">j</span> &lt; <span class="pl-s1">N</span>; <span class="pl-s1">j</span>++) {
            <span class="pl-c1">AVAILABLE</span>[<span class="pl-s1">j</span>] = <span class="pl-c1">AVAILABLE</span>[<span class="pl-s1">j</span>] - <span class="pl-s1">Request</span>[<span class="pl-s1">j</span>];
            <span class="pl-c1">ALLOCATION</span>[<span class="pl-s1">k</span>][<span class="pl-s1">j</span>] = <span class="pl-c1">ALLOCATION</span>[<span class="pl-s1">k</span>][<span class="pl-s1">j</span>] + <span class="pl-s1">Request</span>[<span class="pl-s1">j</span>];
            <span class="pl-c1">NEED</span>[<span class="pl-s1">k</span>][<span class="pl-s1">j</span>] = <span class="pl-c1">NEED</span>[<span class="pl-s1">k</span>][<span class="pl-s1">j</span>] - <span class="pl-s1">Request</span>[<span class="pl-s1">j</span>];
        }
    }

 <span class="pl-c">// 回收资源，并重新更新各种状态 </span>
    <span class="pl-k">public</span> <span class="pl-smi">void</span> <span class="pl-en">rstordata</span>(<span class="pl-smi">int</span> <span class="pl-s1">k</span>) {
        <span class="pl-smi">int</span> <span class="pl-s1">j</span>;
        <span class="pl-k">for</span> (<span class="pl-s1">j</span> = <span class="pl-c1">0</span>; <span class="pl-s1">j</span> &lt; <span class="pl-s1">N</span>; <span class="pl-s1">j</span>++) {
            <span class="pl-c1">AVAILABLE</span>[<span class="pl-s1">j</span>] = <span class="pl-c1">AVAILABLE</span>[<span class="pl-s1">j</span>] + <span class="pl-s1">Request</span>[<span class="pl-s1">j</span>];
            <span class="pl-c1">ALLOCATION</span>[<span class="pl-s1">k</span>][<span class="pl-s1">j</span>] = <span class="pl-c1">ALLOCATION</span>[<span class="pl-s1">k</span>][<span class="pl-s1">j</span>] - <span class="pl-s1">Request</span>[<span class="pl-s1">j</span>];
            <span class="pl-c1">NEED</span>[<span class="pl-s1">k</span>][<span class="pl-s1">j</span>] = <span class="pl-c1">NEED</span>[<span class="pl-s1">k</span>][<span class="pl-s1">j</span>] + <span class="pl-s1">Request</span>[<span class="pl-s1">j</span>];
        }
    }

 <span class="pl-c">// 释放资源 </span>
    <span class="pl-k">public</span> <span class="pl-smi">void</span> <span class="pl-en">free</span>(<span class="pl-smi">int</span> <span class="pl-s1">k</span>) {
        <span class="pl-k">for</span> (<span class="pl-smi">int</span> <span class="pl-s1">j</span> = <span class="pl-c1">0</span>; <span class="pl-s1">j</span> &lt; <span class="pl-s1">N</span>; <span class="pl-s1">j</span>++) {
            <span class="pl-c1">AVAILABLE</span>[<span class="pl-s1">j</span>] = <span class="pl-c1">AVAILABLE</span>[<span class="pl-s1">j</span>] + <span class="pl-c1">ALLOCATION</span>[<span class="pl-s1">k</span>][<span class="pl-s1">j</span>];
            <span class="pl-smi">System</span>.<span class="pl-s1">out</span>.<span class="pl-en">print</span>(<span class="pl-s">"释放"</span> + <span class="pl-s1">k</span> + <span class="pl-s">"号进程的"</span> + <span class="pl-s1">j</span> + <span class="pl-s">"资源!/n"</span>);
        }
    }

    <span class="pl-k">public</span> <span class="pl-smi">int</span> <span class="pl-en">check0</span>(<span class="pl-smi">int</span> <span class="pl-s1">k</span>) {
        <span class="pl-smi">int</span> <span class="pl-s1">j</span>, <span class="pl-s1">n</span> = <span class="pl-c1">0</span>;
        <span class="pl-k">for</span> (<span class="pl-s1">j</span> = <span class="pl-c1">0</span>; <span class="pl-s1">j</span> &lt; <span class="pl-s1">N</span>; <span class="pl-s1">j</span>++) {
            <span class="pl-k">if</span> (<span class="pl-c1">NEED</span>[<span class="pl-s1">k</span>][<span class="pl-s1">j</span>] == <span class="pl-c1">0</span>)
                <span class="pl-s1">n</span>++;
        }
        <span class="pl-k">if</span> (<span class="pl-s1">n</span> == <span class="pl-c1">3</span>)
            <span class="pl-k">return</span> <span class="pl-c1">1</span>;
        <span class="pl-k">else</span>
            <span class="pl-k">return</span> <span class="pl-c1">0</span>;
    }

    <span class="pl-c">// 检查安全性函数 </span>
    <span class="pl-c">//所以银行家算法其核心是：保证银行家系统的资源数至少不小于一个客户的所需要的资源数。在安全性检查函数 chkerr() 上由这个方法来实现</span>
    <span class="pl-c">//这个循环来进行核心判断，从而完成了银行家算法的安全性检查工作。</span>
    <span class="pl-k">public</span> <span class="pl-smi">int</span> <span class="pl-en">chkerr</span>(<span class="pl-smi">int</span> <span class="pl-s1">s</span>) {
        <span class="pl-smi">int</span> <span class="pl-c1">WORK</span>;
        <span class="pl-smi">int</span>[] <span class="pl-c1">FINISH</span> = <span class="pl-k">new</span> <span class="pl-smi">int</span>[<span class="pl-s1">M</span>], <span class="pl-s1">temp</span> = <span class="pl-k">new</span> <span class="pl-smi">int</span>[<span class="pl-s1">M</span>];<span class="pl-c">// 保存临时的安全进程序列 </span>
        <span class="pl-smi">int</span> <span class="pl-s1">i</span>, <span class="pl-s1">j</span>, <span class="pl-s1">k</span> = <span class="pl-c1">0</span>;
        <span class="pl-k">for</span> (<span class="pl-s1">i</span> = <span class="pl-c1">0</span>; <span class="pl-s1">i</span> &lt; <span class="pl-s1">M</span>; <span class="pl-s1">i</span>++)
            <span class="pl-c1">FINISH</span>[<span class="pl-s1">i</span>] = <span class="pl-c1">FALSE</span>;
        <span class="pl-k">for</span> (<span class="pl-s1">j</span> = <span class="pl-c1">0</span>; <span class="pl-s1">j</span> &lt; <span class="pl-s1">N</span>; <span class="pl-s1">j</span>++) {
            <span class="pl-c1">WORK</span> = <span class="pl-c1">AVAILABLE</span>[<span class="pl-s1">j</span>]; <span class="pl-c">// 第 j 个资源可用数 </span>
            <span class="pl-s1">i</span> = <span class="pl-s1">s</span>;
            <span class="pl-c">// 判断第 i 个进程是否满足条件 </span>
            <span class="pl-k">while</span> (<span class="pl-s1">i</span> &lt; <span class="pl-s1">M</span>) {
                <span class="pl-k">if</span> (<span class="pl-c1">FINISH</span>[<span class="pl-s1">i</span>] == <span class="pl-c1">FALSE</span> &amp;&amp; <span class="pl-c1">NEED</span>[<span class="pl-s1">i</span>][<span class="pl-s1">j</span>] &lt;= <span class="pl-c1">WORK</span>) {
                    <span class="pl-c1">WORK</span> = <span class="pl-c1">WORK</span> + <span class="pl-c1">ALLOCATION</span>[<span class="pl-s1">i</span>][<span class="pl-s1">j</span>];
                    <span class="pl-c1">FINISH</span>[<span class="pl-s1">i</span>] = <span class="pl-c1">TRUE</span>;
                    <span class="pl-s1">temp</span>[<span class="pl-s1">k</span>] = <span class="pl-s1">i</span>;
                    <span class="pl-s1">k</span>++;
                    <span class="pl-s1">i</span> = <span class="pl-c1">0</span>;
                } <span class="pl-k">else</span> {
                    <span class="pl-s1">i</span>++;
                }
            }
            <span class="pl-k">for</span> (<span class="pl-s1">i</span> = <span class="pl-c1">0</span>; <span class="pl-s1">i</span> &lt; <span class="pl-s1">M</span>; <span class="pl-s1">i</span>++)
                <span class="pl-k">if</span> (<span class="pl-c1">FINISH</span>[<span class="pl-s1">i</span>] == <span class="pl-c1">FALSE</span>) {
                    <span class="pl-smi">System</span>.<span class="pl-s1">out</span>.<span class="pl-en">print</span>(<span class="pl-s">"/n 系统不安全!!! 本次资源申请不成功!/n"</span>);
                    <span class="pl-k">return</span> <span class="pl-c1">1</span>;
                }
        }
        <span class="pl-smi">System</span>.<span class="pl-s1">out</span>.<span class="pl-en">print</span>(<span class="pl-s">"/n 经安全性检查，系统安全，本次分配成功。/n"</span>);
        <span class="pl-smi">System</span>.<span class="pl-s1">out</span>.<span class="pl-en">print</span>(<span class="pl-s">"本次安全序列："</span>);
        <span class="pl-k">for</span> (<span class="pl-s1">i</span> = <span class="pl-c1">0</span>; <span class="pl-s1">i</span> &lt; <span class="pl-s1">M</span> - <span class="pl-c1">1</span>; <span class="pl-s1">i</span>++) {
            <span class="pl-smi">System</span>.<span class="pl-s1">out</span>.<span class="pl-en">print</span>(<span class="pl-s">"进程"</span> + <span class="pl-s1">temp</span>[<span class="pl-s1">i</span>] + <span class="pl-s">"-&gt;"</span>);
        }
        <span class="pl-smi">System</span>.<span class="pl-s1">out</span>.<span class="pl-en">print</span>(<span class="pl-s">"进程"</span> + <span class="pl-s1">temp</span>[<span class="pl-s1">M</span> - <span class="pl-c1">1</span>]);
        <span class="pl-smi">System</span>.<span class="pl-s1">out</span>.<span class="pl-en">println</span>(<span class="pl-s">"/n"</span>);
        <span class="pl-k">return</span> <span class="pl-c1">0</span>;
    }
}</pre></div>
<h2>
<a id="user-content-死锁示例" class="anchor" href="#%E6%AD%BB%E9%94%81%E7%A4%BA%E4%BE%8B" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>死锁示例</h2>
<p>死锁问题是多线程特有的问题，它可以被认为是线程间切换消耗系统性能的一种极端情况。在死锁时，线程间相互等待资源，而又不释放自身的资源，导致无穷无尽的等待，其结果是系统任务永远无法执行完成。死锁问题是在多线程开发中应该坚决避免和杜绝的问题。</p>
<p>一般来说，要出现死锁问题需要满足以下条件：</p>
<ol>
<li>
<strong>互斥条件</strong>：一个资源每次只能被一个线程使用。</li>
<li>
<strong>请求与保持条件</strong>：一个进程因请求资源而阻塞时，对已获得的资源保持不放。</li>
<li>
<strong>不剥夺条件</strong>：进程已获得的资源，在未使用完之前，不能强行剥夺。</li>
<li>
<strong>循环等待条件</strong>：若干进程之间形成一种头尾相接的循环等待资源关系。</li>
</ol>
<p>只要破坏死锁 4 个必要条件之一中的任何一个，死锁问题就能被解决。</p>
<p>我们先来看一个示例，前面说过，死锁是两个甚至多个线程被永久阻塞时的一种运行局面，这种局面的生成伴随着至少两个线程和两个或者多个资源。代码清单 2 所示的示例中，我们编写了一个简单的程序，它将会引起死锁发生，然后我们就会明白如何分析它。</p>
<h3>
<a id="user-content-清单-2-死锁示例" class="anchor" href="#%E6%B8%85%E5%8D%95-2-%E6%AD%BB%E9%94%81%E7%A4%BA%E4%BE%8B" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>清单 2. 死锁示例</h3>
<div class="highlight highlight-source-java"><pre><span class="pl-k">public</span> <span class="pl-k">class</span> <span class="pl-smi">ThreadDeadlock</span> {

    <span class="pl-k">public</span> <span class="pl-k">static</span> <span class="pl-smi">void</span> <span class="pl-en">main</span>(<span class="pl-smi">String</span>[] <span class="pl-s1">args</span>) <span class="pl-k">throws</span> <span class="pl-smi">InterruptedException</span> {
        <span class="pl-smi">Object</span> <span class="pl-s1">obj1</span> = <span class="pl-k">new</span> <span class="pl-smi">Object</span>();
        <span class="pl-smi">Object</span> <span class="pl-s1">obj2</span> = <span class="pl-k">new</span> <span class="pl-smi">Object</span>();
        <span class="pl-smi">Object</span> <span class="pl-s1">obj3</span> = <span class="pl-k">new</span> <span class="pl-smi">Object</span>();

        <span class="pl-smi">Thread</span> <span class="pl-s1">t1</span> = <span class="pl-k">new</span> <span class="pl-smi">Thread</span>(<span class="pl-k">new</span> <span class="pl-smi">SyncThread</span>(<span class="pl-s1">obj1</span>, <span class="pl-s1">obj2</span>), <span class="pl-s">"t1"</span>);
        <span class="pl-smi">Thread</span> <span class="pl-s1">t2</span> = <span class="pl-k">new</span> <span class="pl-smi">Thread</span>(<span class="pl-k">new</span> <span class="pl-smi">SyncThread</span>(<span class="pl-s1">obj2</span>, <span class="pl-s1">obj3</span>), <span class="pl-s">"t2"</span>);
        <span class="pl-smi">Thread</span> <span class="pl-s1">t3</span> = <span class="pl-k">new</span> <span class="pl-smi">Thread</span>(<span class="pl-k">new</span> <span class="pl-smi">SyncThread</span>(<span class="pl-s1">obj3</span>, <span class="pl-s1">obj1</span>), <span class="pl-s">"t3"</span>);

        <span class="pl-s1">t1</span>.<span class="pl-en">start</span>();
        <span class="pl-s1">Thread</span>.<span class="pl-en">sleep</span>(<span class="pl-c1">5000</span>);
        <span class="pl-s1">t2</span>.<span class="pl-en">start</span>();
        <span class="pl-s1">Thread</span>.<span class="pl-en">sleep</span>(<span class="pl-c1">5000</span>);
        <span class="pl-s1">t3</span>.<span class="pl-en">start</span>();

    }

}

<span class="pl-k">class</span> <span class="pl-smi">SyncThread</span> <span class="pl-k">implements</span> <span class="pl-smi">Runnable</span> {
    <span class="pl-k">private</span> <span class="pl-k">final</span> <span class="pl-smi">Object</span> <span class="pl-s1">obj1</span>;
    <span class="pl-k">private</span> <span class="pl-k">final</span> <span class="pl-smi">Object</span> <span class="pl-s1">obj2</span>;

    <span class="pl-k">public</span> <span class="pl-smi">SyncThread</span>(<span class="pl-smi">Object</span> <span class="pl-s1">o1</span>, <span class="pl-smi">Object</span> <span class="pl-s1">o2</span>) {
        <span class="pl-smi">this</span>.<span class="pl-s1">obj1</span> = <span class="pl-s1">o1</span>;
        <span class="pl-smi">this</span>.<span class="pl-s1">obj2</span> = <span class="pl-s1">o2</span>;
    }

    <span class="pl-c1">@</span><span class="pl-c1">Override</span>
    <span class="pl-k">public</span> <span class="pl-smi">void</span> <span class="pl-en">run</span>() {
        <span class="pl-smi">String</span> <span class="pl-s1">name</span> = <span class="pl-s1">Thread</span>.<span class="pl-en">currentThread</span>().<span class="pl-en">getName</span>();
        <span class="pl-smi">System</span>.<span class="pl-s1">out</span>.<span class="pl-en">println</span>(<span class="pl-s1">name</span> + <span class="pl-s">" acquiring lock on "</span> + <span class="pl-s1">obj1</span>);
        <span class="pl-k">synchronized</span> (<span class="pl-s1">obj1</span>) {
            <span class="pl-smi">System</span>.<span class="pl-s1">out</span>.<span class="pl-en">println</span>(<span class="pl-s1">name</span> + <span class="pl-s">" acquired lock on "</span> + <span class="pl-s1">obj1</span>);
            <span class="pl-en">work</span>();
            <span class="pl-smi">System</span>.<span class="pl-s1">out</span>.<span class="pl-en">println</span>(<span class="pl-s1">name</span> + <span class="pl-s">" acquiring lock on "</span> + <span class="pl-s1">obj2</span>);
            <span class="pl-k">synchronized</span> (<span class="pl-s1">obj2</span>) {
                <span class="pl-smi">System</span>.<span class="pl-s1">out</span>.<span class="pl-en">println</span>(<span class="pl-s1">name</span> + <span class="pl-s">" acquired lock on "</span> + <span class="pl-s1">obj2</span>);
                <span class="pl-en">work</span>();
            }
            <span class="pl-smi">System</span>.<span class="pl-s1">out</span>.<span class="pl-en">println</span>(<span class="pl-s1">name</span> + <span class="pl-s">" released lock on "</span> + <span class="pl-s1">obj2</span>);
        }
        <span class="pl-smi">System</span>.<span class="pl-s1">out</span>.<span class="pl-en">println</span>(<span class="pl-s1">name</span> + <span class="pl-s">" released lock on "</span> + <span class="pl-s1">obj1</span>);
        <span class="pl-smi">System</span>.<span class="pl-s1">out</span>.<span class="pl-en">println</span>(<span class="pl-s1">name</span> + <span class="pl-s">" finished execution."</span>);
    }

    <span class="pl-k">private</span> <span class="pl-smi">void</span> <span class="pl-en">work</span>() {
        <span class="pl-k">try</span> {
            <span class="pl-s1">Thread</span>.<span class="pl-en">sleep</span>(<span class="pl-c1">30000</span>);
        } <span class="pl-k">catch</span> (<span class="pl-smi">InterruptedException</span> <span class="pl-s1">e</span>) {
            <span class="pl-s1">e</span>.<span class="pl-en">printStackTrace</span>();
        }
    }
}</pre></div>
<p>在上面的程序中同步线程正完成 Runnable 的接口，它工作的是两个对象，这两个对象向对方寻求死锁而且都在使用同步阻塞。在主函数中，我使用了三个为同步线程运行的线程，而且在其中每个线程中都有一个可共享的资源。这些线程以向第一个对象获取封锁这种方式运行。但是当它试着向第二个对象获取封锁时，它就会进入等待状态，因为它已经被另一个线程封锁住了。这样，在线程引起死锁的过程中，就形成了一个依赖于资源的循环。当我执行上面的程序时，就产生了输出，但是程序却因为死锁无法停止。输出如清单 3 所示。</p>
<p>清单 3. 清单 2 运行输出</p>
<pre><code>t1 acquiring lock on java.lang.Object@1dd3812
t1 acquired lock on java.lang.Object@1dd3812
t2 acquiring lock on java.lang.Object@c791b9
t2 acquired lock on java.lang.Object@c791b9
t3 acquiring lock on java.lang.Object@1aa9f99
t3 acquired lock on java.lang.Object@1aa9f99
t1 acquiring lock on java.lang.Object@c791b9
t2 acquiring lock on java.lang.Object@1aa9f99
</code></pre>
<p>在此我们可以清楚地在输出结果中辨认出死锁局面，但是在我们实际所用的应用中，发现死锁并将它排除是非常难的。</p>
<h1>
<a id="user-content-死锁情况诊断" class="anchor" href="#%E6%AD%BB%E9%94%81%E6%83%85%E5%86%B5%E8%AF%8A%E6%96%AD" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>死锁情况诊断</h1>
<p>JVM 提供了一些工具可以来帮助诊断死锁的发生，如下面程序清单 4 所示，我们实现了一个死锁，然后尝试通过 jstack 命令追踪、分析死锁发生。</p>
<h3>
<a id="user-content-清单-4-死锁代码" class="anchor" href="#%E6%B8%85%E5%8D%95-4-%E6%AD%BB%E9%94%81%E4%BB%A3%E7%A0%81" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>清单 4. 死锁代码</h3>
<div class="highlight highlight-source-java"><pre><span class="pl-smi">iimport</span> <span class="pl-s1">java</span>.<span class="pl-s1">util</span>.<span class="pl-s1">concurrent</span>.<span class="pl-s1">locks</span>.<span class="pl-s1">ReentrantLock</span>;

<span class="pl-c">//下面演示一个简单的死锁，两个线程分别占用 south 锁和 north 锁，并同时请求对方占用的锁，导致死锁</span>
<span class="pl-k">public</span> <span class="pl-k">class</span> <span class="pl-smi">DeadLock</span> <span class="pl-k">extends</span> <span class="pl-smi">Thread</span> {
    <span class="pl-k">static</span> <span class="pl-smi">ReentrantLock</span> <span class="pl-s1">south</span> = <span class="pl-k">new</span> <span class="pl-smi">ReentrantLock</span>();
    <span class="pl-k">static</span> <span class="pl-smi">ReentrantLock</span> <span class="pl-s1">north</span> = <span class="pl-k">new</span> <span class="pl-smi">ReentrantLock</span>();
    <span class="pl-k">protected</span> <span class="pl-smi">Object</span> <span class="pl-s1">myDirect</span>;

    <span class="pl-k">public</span> <span class="pl-smi">DeadLock</span>(<span class="pl-smi">Object</span> <span class="pl-s1">obj</span>) {
        <span class="pl-smi">this</span>.<span class="pl-s1">myDirect</span> = <span class="pl-s1">obj</span>;
        <span class="pl-k">if</span> (<span class="pl-s1">myDirect</span> == <span class="pl-s1">south</span>) {
            <span class="pl-smi">this</span>.<span class="pl-en">setName</span>(<span class="pl-s">"south"</span>);
        } <span class="pl-k">else</span> {
            <span class="pl-smi">this</span>.<span class="pl-en">setName</span>(<span class="pl-s">"north"</span>);
        }
    }

    <span class="pl-k">public</span> <span class="pl-k">static</span> <span class="pl-smi">void</span> <span class="pl-en">main</span>(<span class="pl-smi">String</span>[] <span class="pl-s1">args</span>) <span class="pl-k">throws</span> <span class="pl-smi">InterruptedException</span> {
        <span class="pl-smi">DeadLock</span> <span class="pl-s1">car2south</span> = <span class="pl-k">new</span> <span class="pl-smi">DeadLock</span>(<span class="pl-s1">south</span>);
        <span class="pl-smi">DeadLock</span> <span class="pl-s1">car2north</span> = <span class="pl-k">new</span> <span class="pl-smi">DeadLock</span>(<span class="pl-s1">north</span>);
        <span class="pl-s1">car2south</span>.<span class="pl-en">start</span>();
        <span class="pl-s1">car2north</span>.<span class="pl-en">start</span>();
    }

    <span class="pl-c1">@</span><span class="pl-c1">Override</span>
    <span class="pl-k">public</span> <span class="pl-smi">void</span> <span class="pl-en">run</span>() {
        <span class="pl-k">if</span> (<span class="pl-s1">myDirect</span> == <span class="pl-s1">south</span>) {
            <span class="pl-k">try</span> {
                <span class="pl-s1">north</span>.<span class="pl-en">lockInterruptibly</span>();<span class="pl-c">//占用 north</span>
                <span class="pl-k">try</span> {
                    <span class="pl-s1">Thread</span>.<span class="pl-en">sleep</span>(<span class="pl-c1">500</span>);
                } <span class="pl-k">catch</span> (<span class="pl-smi">Exception</span> <span class="pl-s1">ex</span>) {
                    <span class="pl-s1">ex</span>.<span class="pl-en">printStackTrace</span>();
                }
                <span class="pl-s1">south</span>.<span class="pl-en">lockInterruptibly</span>();
                <span class="pl-smi">System</span>.<span class="pl-s1">out</span>.<span class="pl-en">println</span>(<span class="pl-s">"car to south has passed"</span>);
            } <span class="pl-k">catch</span> (<span class="pl-smi">InterruptedException</span> <span class="pl-s1">ex</span>) {
                <span class="pl-smi">System</span>.<span class="pl-s1">out</span>.<span class="pl-en">println</span>(<span class="pl-s">"car to south is killed"</span>);
                <span class="pl-s1">ex</span>.<span class="pl-en">printStackTrace</span>();
            } <span class="pl-k">finally</span> {
                <span class="pl-k">if</span> (<span class="pl-s1">north</span>.<span class="pl-en">isHeldByCurrentThread</span>()) {
                    <span class="pl-s1">north</span>.<span class="pl-en">unlock</span>();
                }
                <span class="pl-k">if</span> (<span class="pl-s1">south</span>.<span class="pl-en">isHeldByCurrentThread</span>()) {
                    <span class="pl-s1">south</span>.<span class="pl-en">unlock</span>();
                }
            }
        }
        <span class="pl-k">if</span> (<span class="pl-s1">myDirect</span> == <span class="pl-s1">north</span>) {
            <span class="pl-k">try</span> {
                <span class="pl-s1">south</span>.<span class="pl-en">lockInterruptibly</span>();<span class="pl-c">//占用 south</span>
                <span class="pl-k">try</span> {
                    <span class="pl-s1">Thread</span>.<span class="pl-en">sleep</span>(<span class="pl-c1">500</span>);
                } <span class="pl-k">catch</span> (<span class="pl-smi">Exception</span> <span class="pl-s1">ex</span>) {
                    <span class="pl-s1">ex</span>.<span class="pl-en">printStackTrace</span>();
                }
                <span class="pl-s1">north</span>.<span class="pl-en">lockInterruptibly</span>();
                <span class="pl-smi">System</span>.<span class="pl-s1">out</span>.<span class="pl-en">println</span>(<span class="pl-s">"car to north has passed"</span>);
            } <span class="pl-k">catch</span> (<span class="pl-smi">InterruptedException</span> <span class="pl-s1">ex</span>) {
                <span class="pl-smi">System</span>.<span class="pl-s1">out</span>.<span class="pl-en">println</span>(<span class="pl-s">"car to north is killed"</span>);
                <span class="pl-s1">ex</span>.<span class="pl-en">printStackTrace</span>();
            } <span class="pl-k">finally</span> {
                <span class="pl-k">if</span> (<span class="pl-s1">north</span>.<span class="pl-en">isHeldByCurrentThread</span>()) {
                    <span class="pl-s1">north</span>.<span class="pl-en">unlock</span>();
                }
                <span class="pl-k">if</span> (<span class="pl-s1">south</span>.<span class="pl-en">isHeldByCurrentThread</span>()) {
                    <span class="pl-s1">south</span>.<span class="pl-en">unlock</span>();
                }
            }
        }
    }
}</pre></div>
<p>jstack 可用于导出 Java 应用程序的线程堆栈，-l 选项用于打印锁的附加信息。我们运行 jstack 命令，输出入清单 5 和 6 所示，其中清单 5 里面可以看到线程处于运行状态，代码中调用了拥有锁投票、定时锁等候和可中断锁等候等特性的 ReentrantLock 锁机制。清单 6 直接打印出出现死锁情况，报告 north 和 sourth 两个线程互相等待资源，出现了死锁。</p>
<h3>
<a id="user-content-清单-5-jstack-运行输出-1" class="anchor" href="#%E6%B8%85%E5%8D%95-5-jstack-%E8%BF%90%E8%A1%8C%E8%BE%93%E5%87%BA-1" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>清单 5. jstack 运行输出 1</h3>
<pre><code>[root@facenode4 ~]# jstack -l 31274
2015-01-29 12:40:27
Full thread dump Java HotSpot(TM) 64-Bit Server VM (20.45-b01 mixed mode):

"Attach Listener" daemon prio=10 tid=0x00007f6d3c001000 nid=
            0x7a87 waiting on condition [0x0000000000000000]
 java.lang.Thread.State: RUNNABLE

 Locked ownable synchronizers:
 - None

"DestroyJavaVM" prio=10 tid=0x00007f6da4006800 nid=
            0x7a2b waiting on condition [0x0000000000000000]
 java.lang.Thread.State: RUNNABLE

 Locked ownable synchronizers:
 - None

"north" prio=10 tid=0x00007f6da4101800 nid=
            0x7a47 waiting on condition [0x00007f6d8963b000]
 java.lang.Thread.State: WAITING (parking)
 at sun.misc.Unsafe.park(Native Method)
 - parking to wait for &lt;0x000000075903c7c8&gt; (
                            a java.util.concurrent.locks.ReentrantLock$NonfairSync)
 at java.util.concurrent.locks.LockSupport.park(LockSupport.java:156)
 at java.util.concurrent.locks.AbstractQueuedSynchronizer.
                            parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:811)
 at java.util.concurrent.locks.AbstractQueuedSynchronizer.
                            doAcquireInterruptibly(AbstractQueuedSynchronizer.java:867)
 at java.util.concurrent.locks.AbstractQueuedSynchronizer.
                            acquireInterruptibly(AbstractQueuedSynchronizer.java:1201)
 at java.util.concurrent.locks.ReentrantLock.lockInterruptibly(ReentrantLock.java:312)
 at DeadLock.run(DeadLock.java:50)

 Locked ownable synchronizers:
 - &lt;0x000000075903c798&gt; (a java.util.concurrent.locks.ReentrantLock$NonfairSync)

"south" prio=10 tid=0x00007f6da4100000 nid=
                        0x7a46 waiting on condition [0x00007f6d8973c000]
 java.lang.Thread.State: WAITING (parking)
 at sun.misc.Unsafe.park(Native Method)
 - parking to wait for &lt;0x000000075903c798&gt; (
                                        a java.util.concurrent.locks.ReentrantLock$NonfairSync)
 at java.util.concurrent.locks.LockSupport.park(LockSupport.java:156)
 at java.util.concurrent.locks.AbstractQueuedSynchronizer.
                                    parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:811)
 at java.util.concurrent.locks.AbstractQueuedSynchronizer.
                                    doAcquireInterruptibly(AbstractQueuedSynchronizer.java:867)
 at java.util.concurrent.locks.AbstractQueuedSynchronizer.
                                     acquireInterruptibly(AbstractQueuedSynchronizer.java:1201)
 at java.util.concurrent.locks.ReentrantLock.lockInterruptibly(ReentrantLock.java:312)
 at DeadLock.run(DeadLock.java:28)

 Locked ownable synchronizers:
 - &lt;0x000000075903c7c8&gt; (a java.util.concurrent.locks.ReentrantLock$NonfairSync)

"Low Memory Detector" daemon prio=10 tid=0x00007f6da40d2800 nid=
                                    0x7a44 runnable [0x0000000000000000]
 java.lang.Thread.State: RUNNABLE

 Locked ownable synchronizers:
 - None

"C2 CompilerThread1" daemon prio=10 tid=0x00007f6da40d0000 nid=
                                    0x7a43 waiting on condition [0x0000000000000000]
 java.lang.Thread.State: RUNNABLE

 Locked ownable synchronizers:
 - None

"C2 CompilerThread0" daemon prio=10 tid=0x00007f6da40cd000 nid=
                                    0x7a42 waiting on condition [0x0000000000000000]
 java.lang.Thread.State: RUNNABLE

 Locked ownable synchronizers:
 - None

"Signal Dispatcher" daemon prio=10 tid=0x00007f6da40cb000 nid=
                                    0x7a41 runnable [0x0000000000000000]
 java.lang.Thread.State: RUNNABLE

 Locked ownable synchronizers:
 - None

"Finalizer" daemon prio=10 tid=0x00007f6da40af000 nid=
                                      0x7a40 in Object.wait() [0x00007f6d89d44000]
 java.lang.Thread.State: WAITING (on object monitor)
 at java.lang.Object.wait(Native Method)
 - waiting on &lt;0x0000000759001300&gt; (a java.lang.ref.ReferenceQueue$Lock)
 at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:118)
 - locked &lt;0x0000000759001300&gt; (a java.lang.ref.ReferenceQueue$Lock)
 at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:134)
 at java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:171)

 Locked ownable synchronizers:
 - None

"Reference Handler" daemon prio=10 tid=0x00007f6da40ad000 nid=
                                       0x7a3f in Object.wait() [0x00007f6d89e45000]
 java.lang.Thread.State: WAITING (on object monitor)
 at java.lang.Object.wait(Native Method)
 - waiting on &lt;0x00000007590011d8&gt; (a java.lang.ref.Reference$Lock)
 at java.lang.Object.wait(Object.java:485)
 at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:116)
 - locked &lt;0x00000007590011d8&gt; (a java.lang.ref.Reference$Lock)

 Locked ownable synchronizers:
 - None

"VM Thread" prio=10 tid=0x00007f6da40a6000 nid=0x7a3e runnable 

"GC task thread#0 (ParallelGC)" prio=10 tid=0x00007f6da4019800 nid=0x7a2c runnable 

"GC task thread#1 (ParallelGC)" prio=10 tid=0x00007f6da401b000 nid=0x7a2d runnable 

"GC task thread#2 (ParallelGC)" prio=10 tid=0x00007f6da401d000 nid=0x7a2e runnable 

"GC task thread#3 (ParallelGC)" prio=10 tid=0x00007f6da401f000 nid=0x7a2f runnable 

"GC task thread#4 (ParallelGC)" prio=10 tid=0x00007f6da4020800 nid=0x7a30 runnable 

"GC task thread#5 (ParallelGC)" prio=10 tid=0x00007f6da4022800 nid=0x7a31 runnable 

"GC task thread#6 (ParallelGC)" prio=10 tid=0x00007f6da4024800 nid=0x7a32 runnable 

"GC task thread#7 (ParallelGC)" prio=10 tid=0x00007f6da4026000 nid=0x7a33 runnable 

"GC task thread#8 (ParallelGC)" prio=10 tid=0x00007f6da4028000 nid=0x7a34 runnable 

"GC task thread#9 (ParallelGC)" prio=10 tid=0x00007f6da402a000 nid=0x7a35 runnable 

"GC task thread#10 (ParallelGC)" prio=10 tid=0x00007f6da402b800 nid=0x7a36 runnable 

"GC task thread#11 (ParallelGC)" prio=10 tid=0x00007f6da402d800 nid=0x7a37 runnable 

"GC task thread#12 (ParallelGC)" prio=10 tid=0x00007f6da402f800 nid=0x7a38 runnable 

"GC task thread#13 (ParallelGC)" prio=10 tid=0x00007f6da4031000 nid=0x7a39 runnable 

"GC task thread#14 (ParallelGC)" prio=10 tid=0x00007f6da4033000 nid=0x7a3a runnable 

"GC task thread#15 (ParallelGC)" prio=10 tid=0x00007f6da4035000 nid=0x7a3b runnable 

"GC task thread#16 (ParallelGC)" prio=10 tid=0x00007f6da4036800 nid=0x7a3c runnable 

"GC task thread#17 (ParallelGC)" prio=10 tid=0x00007f6da4038800 nid=0x7a3d runnable 

"VM Periodic Task Thread" prio=10 tid=0x00007f6da40dd000 nid=0x7a45 waiting on condition 

JNI global references: 886
</code></pre>
<h3>
<a id="user-content-清单-6-jstack-运行输出片段-2" class="anchor" href="#%E6%B8%85%E5%8D%95-6-jstack-%E8%BF%90%E8%A1%8C%E8%BE%93%E5%87%BA%E7%89%87%E6%AE%B5-2" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>清单 6. jstack 运行输出片段 2</h3>
<pre><code>Found one Java-level deadlock:
=============================
"north":
 waiting for ownable synchronizer 0x000000075903c7c8, (
                                a java.util.concurrent.locks.ReentrantLock$NonfairSync),
 which is held by "south"
"south":
 waiting for ownable synchronizer 0x000000075903c798, (
                                a java.util.concurrent.locks.ReentrantLock$NonfairSync),
 which is held by "north"

Java stack information for the threads listed above:
===================================================
"north":
 at sun.misc.Unsafe.park(Native Method)
 - parking to wait for &lt;0x000000075903c7c8&gt; (
                                 a java.util.concurrent.locks.ReentrantLock$NonfairSync)
 at java.util.concurrent.locks.LockSupport.park(LockSupport.java:156)
 at java.util.concurrent.locks.AbstractQueuedSynchronizer.
                                    parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:811)
 at java.util.concurrent.locks.AbstractQueuedSynchronizer.
                                    doAcquireInterruptibly(AbstractQueuedSynchronizer.java:867)
 at java.util.concurrent.locks.AbstractQueuedSynchronizer.
                                    acquireInterruptibly(AbstractQueuedSynchronizer.java:1201)
 at java.util.concurrent.locks.ReentrantLock.lockInterruptibly(ReentrantLock.java:312)
 at DeadLock.run(DeadLock.java:50)
"south":
 at sun.misc.Unsafe.park(Native Method)
 - parking to wait for &lt;0x000000075903c798&gt; (
                                     a java.util.concurrent.locks.ReentrantLock$NonfairSync)
 at java.util.concurrent.locks.LockSupport.park(LockSupport.java:156)
 at java.util.concurrent.locks.AbstractQueuedSynchronizer.
                                     parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:811)
 at java.util.concurrent.locks.AbstractQueuedSynchronizer.
                                     doAcquireInterruptibly(AbstractQueuedSynchronizer.java:867)
 at java.util.concurrent.locks.AbstractQueuedSynchronizer.
                                     acquireInterruptibly(AbstractQueuedSynchronizer.java:1201)
 at java.util.concurrent.locks.ReentrantLock.lockInterruptibly(ReentrantLock.java:312)
 at DeadLock.run(DeadLock.java:28)

Found 1 deadlock.
</code></pre>
<h1>
<a id="user-content-死锁解决方案" class="anchor" href="#%E6%AD%BB%E9%94%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>死锁解决方案</h1>
<p>死锁是由四个必要条件导致的，所以一般来说，只要破坏这四个必要条件中的一个条件，死锁情况就应该不会发生。</p>
<p>如果想要打破互斥条件，我们需要允许进程同时访问某些资源，这种方法受制于实际场景，不太容易实现条件；
打破不可抢占条件，这样需要允许进程强行从占有者那里夺取某些资源，或者简单一点理解，占有资源的进程不能再申请占有其他资源，必须释放手上的资源之后才能发起申请，这个其实也很难找到适用场景；
进程在运行前申请得到所有的资源，否则该进程不能进入准备执行状态。这个方法看似有点用处，但是它的缺点是可能导致资源利用率和进程并发性降低；
避免出现资源申请环路，即对资源事先分类编号，按号分配。这种方式可以有效提高资源的利用率和系统吞吐量，但是增加了系统开销，增大了进程对资源的占用时间。
如果我们在死锁检查时发现了死锁情况，那么就要努力消除死锁，使系统从死锁状态中恢复过来。消除死锁的几种方式：</p>
<ol>
<li>
<p>最简单、最常用的方法就是进行系统的重新启动，不过这种方法代价很大，它意味着在这之前所有的进程已经完成的计算工作都将付之东流，包括参与死锁的那些进程，以及未参与死锁的进程；</p>
</li>
<li>
<p>撤消进程，剥夺资源。终止参与死锁的进程，收回它们占有的资源，从而解除死锁。这时又分两种情况：一次性撤消参与死锁的全部进程，剥夺全部资源；或者逐步撤消参与死锁的进程，逐步收回死锁进程占有的资源。一般来说，选择逐步撤消的进程时要按照一定的原则进行，目的是撤消那些代价最小的进程，比如按进程的优先级确定进程的代价；考虑进程运行时的代价和与此进程相关的外部作业的代价等因素；</p>
</li>
<li>
<p>进程回退策略，即让参与死锁的进程回退到没有发生死锁前某一点处，并由此点处继续执行，以求再次执行时不再发生死锁。虽然这是个较理想的办法，但是操作起来系统开销极大，要有堆栈这样的机构记录进程的每一步变化，以便今后的回退，有时这是无法做到的。</p>
</li>
</ol>
<p>其实即便是商业产品，依然会有很多死锁情况的发生，例如 MySQL 数据库，它也经常容易出现死锁案例。</p>
<h2>
<a id="user-content-mysql-死锁情况解决方法" class="anchor" href="#mysql-%E6%AD%BB%E9%94%81%E6%83%85%E5%86%B5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>MySQL 死锁情况解决方法</h2>
<p>假设我们用 Show innodb status 检查引擎状态时发现了死锁情况，如清单 7 所示。</p>
<h3>
<a id="user-content-清单-7-mysql-死锁" class="anchor" href="#%E6%B8%85%E5%8D%95-7-mysql-%E6%AD%BB%E9%94%81" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>清单 7. MySQL 死锁</h3>
<pre><code>WAITING FOR THIS LOCK TO BE GRANTED:
RECORD LOCKS space id 0 page no 843102 n bits 600 index `KEY_TSKTASK_MONTIME2` of table
        `dcnet_db/TSK_TASK` trx id 0 677833454 lock_mode X locks rec but not gap waiting
Record lock, heap no 395 PHYSICAL RECORD: n_fields 3; compact format; info bits 0
0: len 8; hex 8000000000000425; asc %;; 1: len 8; hex 800012412c66d29c; 
                    asc A,f ;; 2: len 8; hex 800000000097629c; asc b ;;

*** WE ROLL BACK TRANSACTION (1)
</code></pre>
<p>我们假设涉事的数据表上面有一个索引，这次的死锁就是由于两条记录同时访问到了相同的索引造成的。</p>
<p>我们首先来看看 InnoDB 类型的数据表，只要能够解决索引问题，就可以解决死锁问题。MySQL 的 InnoDB 引擎是行级锁，需要注意的是，这不是对记录进行锁定，而是对索引进行锁定。在 UPDATE、DELETE 操作时，MySQL 不仅锁定 WHERE 条件扫描过的所有索引记录，而且会锁定相邻的键值，即所谓的 next-key locking；</p>
<p>如语句 <code>UPDATE TSK_TASK SET UPDATE_TIME = NOW() WHERE ID &gt; 10000</code> 会锁定所有主键大于等于 1000 的所有记录，在该语句完成之前，你就不能对主键等于 10000 的记录进行操作；当非簇索引 (non-cluster index) 记录被锁定时，相关的簇索引 (cluster index) 记录也需要被锁定才能完成相应的操作。</p>
<p>再分析一下发生问题的两条 SQL 语句：</p>
<p>当“<code>update TSK_TASK set STATUS_ID=1064,UPDATE_TIME=now () where STATUS_ID=1061 and MON_TIME&lt;date_sub(now(), INTERVAL 30 minute)</code>”执行时，MySQL 会使用<code> KEY_TSKTASK_MONTIME2</code> 索引，因此首先锁定相关的索引记录，因为 KEY_TSKTASK_MONTIME2 是非簇索引，为执行该语句，MySQL 还会锁定簇索引（主键索引）。</p>
<p>假设“<code>update TSK_TASK set STATUS_ID=1067,UPDATE_TIME=now () where ID in (9921180)</code>”几乎同时执行时，本语句首先锁定簇索引 (主键)，由于需要更新 STATUS_ID 的值，所以还需要锁定 KEY_TSKTASK_MONTIME2 的某些索引记录。</p>
<p>这样第一条语句锁定了 KEY_TSKTASK_MONTIME2 的记录，等待主键索引，而第二条语句则锁定了主键索引记录，而等待 KEY_TSKTASK_MONTIME2 的记录，这样死锁就产生了。</p>
<p>我们通过拆分第一条语句解决了死锁问题：即先查出符合条件的 <code>ID：select ID from TSK_TASK where STATUS_ID=1061 and MON_TIME &lt; date_sub(now(), INTERVAL 30 minute)；</code>然后再更新状态：<code>update TSK_TASK set STATUS_ID=1064 where ID in (….)</code>。</p>
]]></description>
                    <pubDate>Thu, 30 Dec 2021 11:37:25 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/bxb100/blog/issues/6</guid>
                <link>https://github.com/bxb100/blog/issues/6</link>
                    <author><![CDATA[bxb100]]></author>
                        <category>Archive</category>
            </item>
            <item>
                <title><![CDATA[雄狮少年杂感]]></title>
                    <description><![CDATA[<p><a href="http://jandan.net/t/5118460" rel="nofollow">煎蛋</a>这图片道尽了我所有的想法 <g-emoji class="g-emoji" alias="rofl" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f923.png">🤣</g-emoji></p>
<p><a href="https://user-images.githubusercontent.com/20685961/147487831-a8feebcf-f0ea-4816-b9ce-9ef6a1d8c895.jpg" target="_blank" rel="nofollow"><img src="https://user-images.githubusercontent.com/20685961/147487831-a8feebcf-f0ea-4816-b9ce-9ef6a1d8c895.jpg" alt="88520f6bly1gxshpjo4j1j20c81br0vp" style="max-width:100%;"></a></p>
]]></description>
                    <pubDate>Mon, 27 Dec 2021 16:06:21 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/bxb100/blog/issues/5</guid>
                <link>https://github.com/bxb100/blog/issues/5</link>
                    <author><![CDATA[bxb100]]></author>
                        <category>杂感</category>
                        <category>煎蛋</category>
            </item>
            <item>
                <title><![CDATA[Bloomberg Tame parents]]></title>
                    <description><![CDATA[<blockquote>
<p>On Oct. 12, the State Council, China’s ultimate govern- ing body, issued a new guideline pushing for something similar. By 2035, the government vowed, the nation will have built a world-class vocational education system to develop highly skilled workers, with at least 10% of the entering class working toward a bachelor’s degree</p>
</blockquote>
<p>国务院计划在 2035 年世界一流的职业教育体系, 会影响至少 10% 的可能会上大学的学生</p>
<blockquote>
<p>Last year, close to 10 million students enrolled in undergraduate pro-grams, up 46% from a decade earlier. Last June, when the class of 2020 graduated, the unemployment rate for degree holders aged 20 to 24 was 19.3%, vs. the economy’s overall 5%, according to HSBC Holdings Plc.</p>
</blockquote>
<p>去年, 有接近一千万的大学生, 比以往 10 年多了 46%. 2020 年, 20-24 大学生的失业率是 19.3% 对比社会总体才 5%, 真的是毕业即失业, 当然这不包括就职造假和考研的同学.</p>
<blockquote>
<p>Last year, value added from manufacturing accounted for only 26% of China’s gross domestic product, a 6 percentage point drop from just a decade earlier.</p>
</blockquote>
<p>去年, 制造业增加值仅占中国国内生产总值的26%, 比 10 年前降低了 6 个百分点.</p>
<blockquote>
<p>Chinese society can be surprisingly rigid. Schools informally classify chil- dren as “golden babies,” “silver babies,” and “copper babies”—usually based on where they’re born and their parents’ wealth. China has enough golden babies, or those who can make it to Tsinghua University and will develop world-class semiconductor chips one day. It has plenty of copper babies, who work in construction and factories making low-end exports such as clothes and toys. But it lacks silver babies, who can manufacture the high-value tech gear that golden babies design.</p>
</blockquote>
<p>国内不缺 '金铜' 孩子, 只缺 '银孩', 因为不上不下, 国内职业歧视导致父母都更愿意让孩子去补习班争取上大学, 而不是做高科技的制作业工人.</p>
]]></description>
                    <pubDate>Wed, 08 Dec 2021 12:22:40 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/bxb100/blog/issues/1</guid>
                <link>https://github.com/bxb100/blog/issues/1</link>
                    <author><![CDATA[bxb100]]></author>
                        <category>读后感</category>
            </item>
    </channel>
</rss>
